/*************************************************************************************** *
*											*
* Plugin generated by AMXX-Studio 							*
*	Jezeli dodajesz achievement, dodaj zawsze go na samym koncu od domyslnych,	*
*	zapobiegnie to przeró¿nym bugom i errorom.					*
*											*
*	Specjalne podziêkowania dla:							*		*
*											*
*	DarkGL - za funkcjê explode									*
*	Nestea***Lemon - Za testowanie, i upierdliwoœc :)				*
*	ExTaZa!? - Za poprzedni¹ wersje Achievementów :)				*
*	sebul - Za edytowanie tematu na amxx.pl :)					*
*											*
*	Je¿eli kogoœ zapomnia³em to pisaæ na pw amxx.pl:)				*
*											*
*	plugin stworzony przez tomcionek15 & grs4, spotkacie nas na amxx.pl pod nickiem *
*	PaTrIcKx, w cs : "STRIKER--McPr0 :D"						*
*											*
*	Licencja freeware / License freeware						*
*											*
*											*
*											*
*************************************************************************************** */

#include <amxmodx>
#include <amxmisc>
#include <expmod>
#include <tutor>
#include <colorchat>
#include <savev>
#include <hamsandwich>

#define PLUGIN "ExpMod Achievements"
#define VERSION "1.9 Alpha"
#define AUTHOR "tomcionek15 & grs4"

#define MAX_ACHIEVEMENTS 150

/************************************************************************ */

new NazwaAchievementI[MAX_ACHIEVEMENTS+1][64]
new NazwaAchievementII[MAX_ACHIEVEMENTS+1][64]
new NazwaAchievementIII[MAX_ACHIEVEMENTS+1][64]

new OpisyAchievementI[MAX_ACHIEVEMENTS+1][128]
new OpisyAchievementII[MAX_ACHIEVEMENTS+1][128]
new OpisyAchievementIII[MAX_ACHIEVEMENTS+1][128]

new WymaganyPoziomI[MAX_ACHIEVEMENTS+1]
new WymaganyPoziomII[MAX_ACHIEVEMENTS+1]
new WymaganyPoziomIII[MAX_ACHIEVEMENTS+1]

new NagrodaI[MAX_ACHIEVEMENTS+1]
new NagrodaII[MAX_ACHIEVEMENTS+1]
new NagrodaIII[MAX_ACHIEVEMENTS+1]

new PotrzebaI[MAX_ACHIEVEMENTS+1]
new PotrzebaII[MAX_ACHIEVEMENTS+1]
new PotrzebaIII[MAX_ACHIEVEMENTS+1]

/************************************************************************ */

new liczba_achI;
new liczba_achII;
new liczba_achIII;

new prefix[] = "[EXPMOD]"

new liczba_wszystkich_ach;

/************************************************************************ */

new status_achI[33][MAX_ACHIEVEMENTS+1];		// 0 - Zablokowane
new status_achII[33][MAX_ACHIEVEMENTS+1];		// 1 - Odblokowane
new status_achIII[33][MAX_ACHIEVEMENTS+1];		// 2 - Ukonczone

new postep_achI[33][MAX_ACHIEVEMENTS+1];
new postep_achII[33][MAX_ACHIEVEMENTS+1];
new postep_achIII[33][MAX_ACHIEVEMENTS+1];

/************************************************************************ */

new enabled;
new disabled;

/************************************************************************ */

new plikI[]	= "ExpMod_AchievementsI.txt"
new plikII[]	= "ExpMod_AchievementsII.txt"
new plikIII[]	= "ExpMod_AchievementsIII.txt"

new plikI_[]	= "ExpMod_AchveiementsI_.txt"
new plikII_[]	= "ExpMod_AchveiementsII_.txt"
new plikIII_[]	= "ExpMod_AchveiementsIII_.txt"

/************************************************************************ */

public plugin_natives()
{
	register_native("exp_register_achI",		 "register_achievementI", 1)
	register_native("exp_register_achII",		 "register_achievementII", 1)
	register_native("exp_register_achIII", 		 "register_achievementIII", 1)
	
	register_native("exp_set_achievement_progress",  "set_achievement_progress", 1)
	register_native("exp_get_achievement_progress",  "get_achievement_progress", 1)
	
	register_native("exp_get_achievement_status", 	 "get_achievement_status", 1)
	register_native("exp_set_achievement_status", 	 "set_achievement_status", 1)
	register_native("exp_get_achievementid_by_desc", "get_achievementid_by_desc", 1)
	register_native("exp_get_achievementid_by_name", "get_achievementid_by_name", 1)
	register_native("exp_get_achievements_number", 	 "get_achievements_number", 1)
	
	register_native("exp_get_achievement_req_lvl", 	 "get_achievement_req_lvl", 1)
	register_native("exp_get_achievement_need", 	 "get_achievement_need", 1)
	register_native("exp_get_achievement_award", 	 "get_achievement_award", 1)
	
	register_native("exp_get_achievement_name", 	 "get_achievement_name", 1)
	register_native("exp_get_achievement_desc", 	 "get_achievement_desc", 1)

}

/************************************************************************ */

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	tutorInit()
	register_dictionary("ExpMod.txt")
	
	enabled = CreateMultiForward("achievement_enabled", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	disabled = CreateMultiForward("achievement_disabled", ET_CONTINUE, FP_CELL, FP_CELL, FP_CELL)
	
	register_clcmd("say /ach", "MenuAch")
	register_clcmd("say /achievements", "MenuAch")
	register_clcmd("say /achievement", "MenuAch")
	
	RegisterHam(Ham_Spawn,	"player","OdrodzenieGracza", 1);
	set_task(40.0, "Zaapisz", _, _, _, "b")
	register_event("DeathMsg", "DeathMsg",	"a");
}

/************************************************************************ */
	

public Zaapisz()
{
	for(new i = 1; i < 33; i++)
	{
		if(!is_user_connected(i) || is_user_hltv(i))
			continue;
		ZapiszI(i)
		ZapiszII(i)
		ZapiszIII(i)
	}
}

public client_connect(id)
{
	WczytajWszystko(id)
	new iRet;
	for(new i= 1; i <= liczba_wszystkich_ach ; i++)
	{
		if(status_achI[id][i] == 1)
				ExecuteForward(enabled, iRet, id, i, 1);
		if(status_achII[id][i] == 1)
				ExecuteForward(enabled, iRet, id, i, 2);	
		if(status_achIII[id][i] == 1)
				ExecuteForward(enabled, iRet, id, i, 3);
	}
	
}
public client_disconnect(id)
{
	ZapiszWszystko(id)
}

/************************************************************************ */

public OdrodzenieGracza(id)
{
	SprawdzAch(id)
	ZapiszWszystko(id)
}

/************************************************************************ */

public MenuAch(id)
{
	if(!is_user_connected(id))
		return PLUGIN_CONTINUE;
	
	new opis[256], title[256];
	formatex(title, 255, "%L", LANG_PLAYER, "MENU_ACH_TITLE")
	new menu = menu_create(title, "WyborAchi_Wybieranie");
	new menu_cb = menu_makecallback("WyborAchi_Cb");
	for(new i = 1 ; i <= liczba_wszystkich_ach ; i++)
	{
		if(status_achI[id][i] == 0)
			formatex(opis, 255, "%s \r[%L]\y [%d lvl]", NazwaAchievementI[i], LANG_PLAYER, "MENU_ACH_LOCKED", WymaganyPoziomI[i]);
		else if(status_achI[id][i] == 1)
			formatex(opis, 255, "%s \r[%d / %d]\y [%d exp]", NazwaAchievementI[i], postep_achI[id][i], PotrzebaI[i], NagrodaI[i]);
		else if(status_achI[id][i] == 2)
		{
			if(status_achII[id][i] == 0)
				formatex(opis, 255, "%s \r[%L]\y [%d lvl]", NazwaAchievementII[i], LANG_PLAYER, "MENU_ACH_LOCKED",WymaganyPoziomII[i]);
			else if(status_achII[id][i] == 1)
				formatex(opis, 255, "%s \r[%d / %d]\y [%d exp]", NazwaAchievementII[i], postep_achII[id][i], PotrzebaII[i], NagrodaII[i]);
			else if(status_achII[id][i] == 2)
			{
				if(status_achIII[id][i] == 0)
					formatex(opis, 255, "%s \r[%L]\y [%d lvl]", NazwaAchievementIII[i], LANG_PLAYER, "MENU_ACH_LOCKED", WymaganyPoziomIII[i]);
				else if(status_achIII[id][i] == 1)
					formatex(opis, 255, "%s \r[%d / %d]\y [%d exp]", NazwaAchievementIII[i], postep_achIII[id][i], PotrzebaIII[i], NagrodaIII[i]);
				else if(status_achIII[id][i] == 2)
					formatex(opis, 255, "%s \r[%L]", NazwaAchievementIII[i], LANG_PLAYER, "MENU_ACH_COMPLETED")
			}
		}
		menu_additem(menu, opis, _, _, menu_cb);
	}
	
	menu_display(id, menu);
	
	return PLUGIN_CONTINUE;
}
public WyborAchi_Cb(id, menu, item)
{
	item++
	for(new i = 1; i <= liczba_wszystkich_ach; i++)
	{
		if(item == i && status_achI[id][i] == 1)
			return ITEM_ENABLED
		if(item == i && status_achII[id][i] == 1 && status_achI[id][i] == 2)
			return ITEM_ENABLED
		if(item == i && status_achIII[id][i] == 1 && status_achII[id][i] == 2)
			return ITEM_ENABLED
	}	
	return ITEM_DISABLED;
}
public WyborAchi_Wybieranie(id, menu, item)
{
	if(item == MENU_EXIT || !is_user_connected(id))
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	item++
	new tytul[256]
	if(status_achI[id][item] == 1)
	{
		formatex(tytul, 255, "\w%L: \r%s\w [\y%d\w/\y%d\w]^n%L:\r %s^n\w%L:\r %d\w %L", LANG_PLAYER, "NAME", NazwaAchievementI[item], postep_achI[id][item], PotrzebaI[item], LANG_PLAYER, "TARGET", OpisyAchievementI[item], LANG_PLAYER, "AWARD", NagrodaI[item], LANG_PLAYER, "EXP")
	}
	if(status_achI[id][item] == 2 && status_achII[id][item] == 1)
	{
		formatex(tytul, 255, "\w%L: \r%s\w [\y%d\w/\y%d\w]^n%L:\r %s^n\w%L:\r %d\w %L", LANG_PLAYER, "NAME", NazwaAchievementII[item], postep_achII[id][item], PotrzebaII[item], LANG_PLAYER, "TARGET", OpisyAchievementII[item], LANG_PLAYER, "AWARD", NagrodaII[item], LANG_PLAYER, "EXP")
	}
	if(status_achI[id][item] == 2 && status_achII[id][item] == 2 && status_achIII[id][item] == 1)
	{
		formatex(tytul, 255, "\w%L: \r%s\w [\y%d\w/\y%d\w]^n%L:\r %s^n\w%L:\r %d\w %L", LANG_PLAYER, "NAME", NazwaAchievementIII[item], postep_achIII[id][item], PotrzebaIII[item], LANG_PLAYER, "TARGET", OpisyAchievementIII[item], LANG_PLAYER, "AWARD", NagrodaIII[item], LANG_PLAYER, "EXP")
	}
	
	new menus = menu_create(tytul, "WyborAch_1")
	menu_additem(menus, "Wstecz")
	menu_display(id, menus)
	return PLUGIN_CONTINUE;
}
public WyborAch_1(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu)
		return PLUGIN_CONTINUE
	}
	if(item == 0)
	{
		MenuAch(id)
	}
	return PLUGIN_CONTINUE
}

/************************************************************************ */

public SprawdzAch(id)
{
	if(!is_user_connected(id))
		return PLUGIN_CONTINUE;
		
	for(new i= 1; i <= liczba_wszystkich_ach ; i++)
	{
		if(exp_get_user_level(id) >= WymaganyPoziomI[i] && status_achI[id][i] == 0)
		{
				status_achI[id][i] = 1;
				AchievementOdblokowany(id, i, 1)
		}
		if(exp_get_user_level(id) >= WymaganyPoziomII[i] && status_achII[id][i] == 0 && status_achI[id][i] == 2)
		{
				status_achII[id][i] = 1;
				AchievementOdblokowany(id, i, 2)
		}
				
		if(exp_get_user_level(id) >= WymaganyPoziomIII[i] && status_achIII[id][i] == 0 && status_achI[id][i] == 2)
		{
				status_achIII[id][i] = 1;
				AchievementOdblokowany(id, i, 3)
		}
				
		if(postep_achI[id][i] >= PotrzebaI[i] && status_achI[id][i] == 1)
		{
			status_achI[id][i] = 2;
			postep_achI[id][i] = 0
			postep_achII[id][i] = 0
		
			tutorMake(id, TUTOR_GREEN, 5.0, "%L^n%L^n%s^n%L: %d", LANG_PLAYER, "ACH_LEVEL_I", LANG_PLAYER, "ACH_EARNED_ACH", NazwaAchievementI[i], OpisyAchievementI[i], LANG_PLAYER, "AWARD", NagrodaI[i])
			ColorChat(id, GREEN, "%s^x01 %L", prefix, LANG_PLAYER, "ACH_LEVEL_I")
			ColorChat(id, GREEN, "%s^x01 %L", prefix, LANG_PLAYER, "ACH_EARNED_ACH", NazwaAchievementI[i])
			ColorChat(id, GREEN, "%s^x01 %s", prefix, OpisyAchievementI[i])
			ColorChat(id, GREEN, "%s^x01 %L: %d", prefix, LANG_PLAYER, "AWARD", NagrodaI[i])
			AchievementZablokowany(id, i, 1)
			exp_set_user_exp(id, exp_get_user_exp(id)+NagrodaI[i]);
			exp_checklevel(id);
			return PLUGIN_CONTINUE
		}
		else if(postep_achII[id][i] >= PotrzebaII[i] && status_achII[id][i] == 1)
		{
			status_achII[id][i] = 2;
			postep_achII[id][i] = 0
			postep_achIII[id][i] = 0
		
			tutorMake(id, TUTOR_GREEN, 5.0, "%L^n%L^n%s^n%L: %d", LANG_PLAYER, "ACH_LEVEL_II", LANG_PLAYER, "ACH_EARNED_ACH", NazwaAchievementII[i], OpisyAchievementII[i], LANG_PLAYER, "AWARD", NagrodaII[i])
			ColorChat(id, GREEN, "%s^x01 %L", prefix, LANG_PLAYER, "ACH_LEVEL_II")
			ColorChat(id, GREEN, "%s^x01 %L", prefix, LANG_PLAYER, "ACH_EARNED_ACH", NazwaAchievementII[i])
			ColorChat(id, GREEN, "%s^x01 %s", prefix, OpisyAchievementII[i])
			ColorChat(id, GREEN, "%s^x01 %L: %d", prefix, LANG_PLAYER, "AWARD", NagrodaII[i])
			AchievementZablokowany(id, i, 2)
			exp_set_user_exp(id, exp_get_user_exp(id)+NagrodaII[i]);
			exp_checklevel(id);
			return PLUGIN_CONTINUE
		}
		else if(postep_achIII[id][i] >= PotrzebaIII[i] && status_achIII[id][i] == 1 )
		{
			status_achIII[id][i] = 2
			postep_achIII[id][i] = 0
			tutorMake(id, TUTOR_GREEN, 5.0, "%L^n%L^n%s^n%L: %d", LANG_PLAYER, "ACH_LEVEL_III", LANG_PLAYER, "ACH_EARNED_ACH", NazwaAchievementIII[i], OpisyAchievementIII[i], LANG_PLAYER, "AWARD", NagrodaIII[i])
			ColorChat(id, GREEN, "%s^x01 %L", prefix, LANG_PLAYER, "ACH_LEVEL_III")
			ColorChat(id, GREEN, "%s^x01 %L", prefix, LANG_PLAYER, "ACH_EARNED_ACH", NazwaAchievementIII[i])
			ColorChat(id, GREEN, "%s^x01 %s", prefix, OpisyAchievementIII[i])
			ColorChat(id, GREEN, "%s^x01 %L: %d", prefix, LANG_PLAYER, "AWARD", NagrodaIII[i])
			AchievementZablokowany(id, i, 3)
			exp_set_user_exp(id, exp_get_user_exp(id)+NagrodaIII[i])
			exp_checklevel(id)
			return PLUGIN_CONTINUE
		}
	}
	ZapiszWszystko(id)
	return PLUGIN_CONTINUE
}

/************************************************************************ */

public DeathMsg()
{
	new atakujacy = read_data(1)
	new id = read_data(2)
	
	if(!is_user_connected(atakujacy) || is_user_hltv(atakujacy))
		return PLUGIN_CONTINUE
	
	if(atakujacy != id && get_user_team(atakujacy) != get_user_team(id))
	{
		SprawdzAch(atakujacy)
		SprawdzAch(id)
	}
	return PLUGIN_CONTINUE
}

/************************************************************************ */

public ZapiszWszystko(id)
{
	ZapiszI(id)
	ZapiszII(id)
	ZapiszIII(id)
}
public WczytajWszystko(id)
{
	WczytajI(id)
	WczytajII(id)
	WczytajIII(id)
}

/************************************************************************ */

public ZapiszI(id)
{
	new nick[33], dane[2][500], szTemp[25]
	get_user_name(id, nick, 32)
	for(new i = 1; i <= liczba_achI; i++)
	{
		formatex(szTemp, 24, " %d", status_achI[id][i])
		add(dane[0], 499, szTemp)
	}
	for(new i = 1; i <= liczba_achI; i++)
	{
		formatex(szTemp, 24, " %d", postep_achI[id][i])
		add(dane[1], 499, szTemp)
	}
	ZapiszDane(plikI, nick, dane[0])
	ZapiszDane(plikI_, nick, dane[1])
}
public ZapiszII(id)
{
	new nick[33], dane[2][500], szTemp[25]
	get_user_name(id, nick, 32)
	for(new i = 1; i <= liczba_achII; i++)
	{
		formatex(szTemp, 24, " %d", status_achII[id][i])
		add(dane[0], 499, szTemp)
	}
	for(new i = 1; i <= liczba_achII; i++)
	{
		formatex(szTemp, 24, " %d", postep_achII[id][i])
		add(dane[1], 499, szTemp)
	}
	ZapiszDane(plikII, nick, dane[0])
	ZapiszDane(plikII_, nick, dane[1])
}
public ZapiszIII(id)
{
	new nick[33], dane[2][500], szTemp[25]
	get_user_name(id, nick, 32)
	for(new i = 1; i <= liczba_achIII; i++)
	{
		formatex(szTemp, 24, " %d", status_achIII[id][i])
		add(dane[0], 499, szTemp)
	}
	for(new i = 1; i <= liczba_achIII; i++)
	{
		formatex(szTemp, 24, " %d", postep_achIII[id][i])
		add(dane[1], 499, szTemp)
	}
	ZapiszDane(plikIII, nick, dane[0])
	ZapiszDane(plikIII_, nick, dane[1])
}

/************************************************************************ */

public WczytajI(id)
{
	new nick[33], dane[500], dane2[500]
	get_user_name(id, nick, 32)
	WczytajDane(plikI, nick, dane, 499)
	WczytajDane(plikI_, nick, dane2, 499)
	
	remove_quotes(dane)
	remove_quotes(dane2)

	static wartosc[MAX_ACHIEVEMENTS+1][15]
	static wartosc1[MAX_ACHIEVEMENTS+1][15]
	
	explode(dane, ' ', wartosc, MAX_ACHIEVEMENTS+1, 14)
	explode(dane2, ' ', wartosc1, MAX_ACHIEVEMENTS+1, 14)
	for(new i; i <= liczba_achI; i++)
	{
		status_achI[id][i] = str_to_num(wartosc[i])
		postep_achI[id][i] = str_to_num(wartosc1[i])
	}
	
}
public WczytajII(id)
{
	new nick[33], dane[500], dane2[500]
	get_user_name(id, nick, 32)
	WczytajDane(plikII, nick, dane, 499)
	WczytajDane(plikII_, nick, dane2, 499)
	
	remove_quotes(dane)
	remove_quotes(dane2)

	static wartosc[MAX_ACHIEVEMENTS+1][15]
	static wartosc1[MAX_ACHIEVEMENTS+1][15]
	explode(dane, ' ', wartosc, MAX_ACHIEVEMENTS+1, 14)
	explode(dane2, ' ', wartosc1, MAX_ACHIEVEMENTS+1, 14)
	for(new i; i <= liczba_achII; i++)
	{
		status_achII[id][i] = str_to_num(wartosc[i])
		postep_achII[id][i] = str_to_num(wartosc1[i])
	}
}
public WczytajIII(id)
{
	new nick[33], dane[500], dane2[500]
	get_user_name(id, nick, 32)
	WczytajDane(plikIII, nick, dane, 499)
	WczytajDane(plikIII_, nick, dane2, 499)
	
	remove_quotes(dane)
	remove_quotes(dane2)

	static wartosc[MAX_ACHIEVEMENTS+1][15]
	static wartosc1[MAX_ACHIEVEMENTS+1][15]
	explode(dane, ' ', wartosc, MAX_ACHIEVEMENTS+1, 14)
	explode(dane2, ' ', wartosc1, MAX_ACHIEVEMENTS+1, 14)
	for(new i; i <= liczba_achIII; i++)
	{
		status_achIII[id][i] = str_to_num(wartosc[i])
		postep_achIII[id][i] = str_to_num(wartosc1[i])
	}
}

/************************************************************************ */

public AchievementOdblokowany(index, achievementid, achievement_level)
{
	new iRet;
	ExecuteForward(enabled, iRet, index, achievementid, achievement_level);
}

public AchievementZablokowany(index, achievementid, achievement_level)
{
	new iRet;
	ExecuteForward(disabled, iRet, index, achievementid, achievement_level);
}

/************************************************************************ */

public register_achievementI(const name[], const desc[], lvl, award, need)
{
	
	
	if(liczba_wszystkich_ach+1 > MAX_ACHIEVEMENTS+1)
		return PLUGIN_CONTINUE
		
	liczba_achI++
	liczba_wszystkich_ach++
	
	param_convert(1)
	param_convert(2)
	
	copy(NazwaAchievementI[liczba_achI], 63, name)
	copy(OpisyAchievementI[liczba_achI], 127, desc)
	
	WymaganyPoziomI[liczba_achI] = lvl
	NagrodaI[liczba_achI] = award;
	PotrzebaI[liczba_achI] = need;
	
	return liczba_achI;
}

public register_achievementII(const name[], const desc[], lvl, award, need)
{
	
	if(liczba_wszystkich_ach > MAX_ACHIEVEMENTS+1)
		return PLUGIN_CONTINUE
	
	liczba_achII++
	param_convert(1)
	param_convert(2)
	
	copy(NazwaAchievementII[liczba_achII], 63, name)
	copy(OpisyAchievementII[liczba_achII], 127, desc)
	WymaganyPoziomII[liczba_achII] = lvl
	NagrodaII[liczba_achII] = award;
	PotrzebaII[liczba_achII] = need;
	
	return liczba_achII;
}

public register_achievementIII(const name[], const desc[], lvl, award, need)
{
	
	if(liczba_wszystkich_ach+1 > MAX_ACHIEVEMENTS+1)
		return PLUGIN_CONTINUE
	liczba_achIII++
	param_convert(1)
	param_convert(2)
	copy(NazwaAchievementIII[liczba_achIII], 63, name)
	copy(OpisyAchievementIII[liczba_achIII], 127, desc)
	WymaganyPoziomIII[liczba_achIII] = lvl
	NagrodaIII[liczba_achIII] = award;
	PotrzebaIII[liczba_achIII] = need;
	
	return liczba_achIII;
}

/************************************************************************ */

public set_achievement_progress(index, achievementid, achievementlvl, value)
{
	if(achievementlvl == 1 && status_achI[index][achievementid] == 1)
		postep_achI[index][achievementid] = value
	else if(achievementlvl == 2 && status_achII[index][achievementid] == 1)
		postep_achII[index][achievementid] = value
	else if(achievementlvl == 3 && status_achIII[index][achievementid] == 1)
		postep_achIII[index][achievementid] = value
		
	SprawdzAch(index);
}
public get_achievement_progress(index, achievementid, achievementlvl)
{
	if(achievementlvl == 1)
		return postep_achI[index][achievementid]
	else if(achievementlvl == 2)
		return postep_achII[index][achievementid]
	else if(achievementlvl == 3)
		return postep_achIII[index][achievementid]
	return -1;
}
public get_achievement_status(index, achievementid, achievementlvl)
{
	if(achievementlvl == 1)
		return status_achI[index][achievementid]
	else if(achievementlvl == 2)
		return status_achII[index][achievementid]
	else if(achievementlvl == 3)
		return status_achIII[index][achievementid]
	return -1;
}

public set_achievement_status(index, achievementid, achievementlvl, value)
{
	if(value > 3 || value < 0)
		return PLUGIN_CONTINUE
		
	if(achievementlvl == 1)
		status_achI[index][achievementid] = value;
	else if(achievementlvl == 2)
		status_achII[index][achievementid] = value;
	else if(achievementlvl == 3)
		status_achIII[index][achievementid] = value;
	
	return PLUGIN_CONTINUE
}

public get_achievement_name(ach_id, ach_lvl, desc[], len)
{
	param_convert(3)
	
	if(ach_id > liczba_wszystkich_ach)
		return PLUGIN_CONTINUE
		
	if(ach_lvl == 1)
		copy(desc, len, NazwaAchievementI[ach_id])
	if(ach_lvl == 2)
		copy(desc, len, NazwaAchievementII[ach_id])
	if(ach_lvl == 3)
		copy(desc, len, NazwaAchievementIII[ach_id])
		
	return PLUGIN_CONTINUE
}

public get_achievement_desc(ach_id, ach_lvl, desc[], len)
{
	param_convert(3)
	
	if(ach_id > liczba_wszystkich_ach)
		return PLUGIN_CONTINUE
		
	if(ach_lvl == 1)
		copy(desc, len, OpisyAchievementI[ach_id])
	if(ach_lvl == 2)
		copy(desc, len, OpisyAchievementII[ach_id])
	if(ach_lvl == 3)
		copy(desc, len, OpisyAchievementIII[ach_id])
		
	return PLUGIN_CONTINUE
}

public get_achievement_req_lvl(ach_id, ach_lvl)
{
	if(ach_id > liczba_wszystkich_ach)
		return PLUGIN_CONTINUE
		
	if(ach_lvl == 1)
		return WymaganyPoziomI[ach_id]
	if(ach_lvl == 2)
		return WymaganyPoziomII[ach_id]
	if(ach_lvl == 3)
		return WymaganyPoziomIII[ach_id]
		
	return PLUGIN_CONTINUE
}

public get_achievement_award(ach_id, ach_lvl)
{
	if(ach_id > liczba_wszystkich_ach)
		return PLUGIN_CONTINUE
		
	if(ach_lvl == 1)
		return NagrodaI[ach_id]
	if(ach_lvl == 2)
		return NagrodaII[ach_id]
	if(ach_lvl == 3)
		return NagrodaIII[ach_id]
		
	return PLUGIN_CONTINUE
}

public get_achievement_need(ach_id, ach_lvl)
{
	if(ach_id > liczba_wszystkich_ach)
		return PLUGIN_CONTINUE
		
	if(ach_lvl == 1)
		return PotrzebaI[ach_id]
	if(ach_lvl == 2)
		return PotrzebaII[ach_id]
	if(ach_lvl == 3)
		return PotrzebaIII[ach_id]
		
	return PLUGIN_CONTINUE
}

public get_achievements_number()
	return liczba_wszystkich_ach;
	
public get_achievementid_by_name(ach_lvl, const name[])
{
	for(new i = 1; i <= liczba_wszystkich_ach; i++)
	{
		if(ach_lvl == 1)
		{
			if(equali(NazwaAchievementI[i], name, strlen(name)))
			{
				return i;
			}
		}
		if(ach_lvl == 2)
		{
			if(equali(NazwaAchievementII[i], name, strlen(name)))
			{
				return i;
			}
		}
		if(ach_lvl == 3)
		{
			if(equali(NazwaAchievementIII[i], name, strlen(name)))
			{
				return i;
			}
		}
	}
	return -1;
}

public get_achievementid_by_desc(ach_lvl, const desc[])
{
	for(new i = 1; i <= liczba_wszystkich_ach; i++)
	{
		if(ach_lvl == 1)
		{
			if(equali(OpisyAchievementI[i], desc, strlen(desc)))
			{
				return i;
			}
		}
		if(ach_lvl == 2)
		{
			if(equali(OpisyAchievementII[i], desc, strlen(desc)))
			{
				return i;
			}
		}
		if(ach_lvl == 3)
		{
			if(equali(OpisyAchievementIII[i], desc, strlen(desc)))
			{
				return i;
			}
		}
	}
	return -1;
}

/************************************************************************ */

stock explode(const string[],const character,output[][],const maxs,const maxlen){
        new iDo = 0;
        new len = strlen(string);
        new oLen = 0;
        do
        {
                oLen += (1+copyc(output[iDo++],maxlen,string[oLen],character))
        }
        while(oLen < len && iDo < maxs)
}
