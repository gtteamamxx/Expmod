/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fun>
#include <cstrike>
#include <hamsandwich>
#include <fakemeta>
#include <cvar_util>
#include <csx>

#define PLUGIN "ExpMod v2"
#define VERSION "1.0"
#define AUTHOR "GT Team"

#define MAX_PLAYER 32

new giExpTable[] = { 100, 200, 300, 500, 800, 1300, 2100 }


new gszCvarFile[] = "addons/amxmodx/configs/exp_cvars.cfg"
new gszConfigFile[] = "addons/amxmodx/configs/exp_config.cfg";
new gszLogFile[] = "ExpMod_2.log";

new gszPrefix[] = "[EXPMOD v2]"

enum e_PlayerInfo {
	PLAYER_NICK[33],
	PLAYER_LEVEL,
	PLAYER_EXP
}

enum e_CvarInfo {
	CVAR_KILL,
	CVAR_KILL_HS,
	CVAR_PLANT_BOMB,
	CVAR_DEFUSE_BOMB
}

enum e_CvarValue {
	KILL,
	KILL_HS,
	PLANT_BOMB,
	DEFUSE_BOMB
}
enum e_TaskNum {
	TASK_HUD = 217
}

new g_Player[MAX_PLAYER+1][e_PlayerInfo]

new g_CvarPointer[e_CvarInfo];
new g_CvarValue[e_CvarValue];

new g_Task[e_TaskNum]

new bool:gTableExp;
new Float:gTableMultiplier_1;
new Float:gTableMultiplier_2;
new gTableMultiplier_Power;
new gTableMultiplier_MaxLevel;

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_event("DeathMsg", "event_DeathMsg", "a")
	
	RegisterHam(Ham_Spawn, "player", "PlayerSpawn", 1)
	
	RegisterCvars()
	LoadConfig()
}

public RegisterCvars() { 
	
	g_CvarPointer[CVAR_KILL] = 		CvarRegister("exp_kill", 	"60", _, _, true, 1.0, false, _, true);
	g_CvarPointer[CVAR_KILL_HS] = 		CvarRegister("exp_kill_hs", 	"90", _, _, false, _, false, _, true);
	g_CvarPointer[CVAR_PLANT_BOMB] = 	CvarRegister("exp_plant_bomb", 	"115", _, _, false, _, false, _, true);
	g_CvarPointer[CVAR_DEFUSE_BOMB] = 	CvarRegister("exp_defuse_bomb", "115", _, _, false, _, false, _, true);
	
	for(new i; i < _:e_CvarInfo;i++) {
		CvarCache(g_CvarPointer[e_CvarInfo:i], CvarType_Int, g_CvarValue[e_CvarValue:i])
	}
	
}
public client_connect(id) {
	ResetPlayerInformation(id)
	
	get_user_name(id, g_Player[id][PLAYER_NICK], 32)
}

public client_disconnect(id) {
	ResetPlayerInformation(id);
}

public ResetPlayerInformation(id) {
	for(new i; i<_:e_PlayerInfo;i++) {
		g_Player[id][e_PlayerInfo:i] = 0
	}
	
	formatex(g_Player[id][PLAYER_NICK], 32, "");
}
public LoadConfig() {
	if(file_exists(gszCvarFile))
		server_cmd("exec %s",gszCvarFile)
	else
		log_to_file(gszLogFile, "%s Brak pliku konfiguracyjnego cvarow. Wczytywanie domyslnych wartosci", gszPrefix);

	LoadDefaultConfig();
	
	if(file_exists(gszConfigFile)) {
		/* Wczytwyanie konfiguracji z pliku gszConfigFile */

		new szText[64], iLen
		new szData[3][33];

		new iValue;
		new Float:fValue;
	
		if(!file_exists(SCIEZKA_PLIKU))
			return PLUGIN_CONTINUE
	
		for(new i = 0 ; read_file(gszConfigFile_PLIKU, i, szText, 63, iLen); i ++)
		{
			if(szText[0] == ';' || (szText[0] == '/' && szText[1] == '/') || (szText[0] == '/')
				continue;
			trim(szText)
			
			if(!strlen())
				continue;
				
			parse(szText, szData[0], 32, szData[1], 32, szData[2], 32)

			// szData[0] - komenda
			// szData[1] - ' = ' 
			// szData[2] - wartosc [int / float]

			iValue = str_to_num(szData[2]);
			fValue = str_to_float(szData[2]);

			if(containi(szData[2], "ON"))
				iValue = 1;
                        else if(containi(szData[2], "OFF"))
                                iValue = 0;

			if(equali(szData[0], "TABLE_EXP")) {
				gTableExp = iValue ? true : false
			}
			else if(equali(szData[0], "EXP_MULTIPLIER_POWER")) {
				gTableMultiplier_Power = iValue;
			}
			else if(equali(szData[0], "EXP_MULTIPLIER_1")) {
				gTableMultiplier_1 = fValue;
			}
			else if(equali(szData[0], "EXP_MULTIPLIER_2")) {
				gTableMultiplier_2 = fValue;
			}
			else if(equali(szData[0], "EXP_MULTIPLIER_MAX_LEVEL")) {
				gTableMultiplier_MaxLevel = iValue;
			}
		
		}
	
	}
	else	
		log_to_file(gszLogFile, "%s Brak pliku konfiguracyjnego silnika. Wczytywanie domyslnych wartosci", gszPrefix);
	
}

public LoadDefaultConfig() {
        gTableExp = true
        gTableMultiplier_Pwr = 2
public checkLevel(id) {
	while(g_Player[id][PLAYER_EXP] >= get_level_exp(g_Player[id][PLAYER_LEVEL])) {
		g_Player[id][PLAYER_LEVEL] ++;
		client_print(id, 3, "%s Osiagnales poziom %d!", g_Prefix, g_Player[id][PLAYER_LEVEL]);
	}
}


public PlayerSpawn(id) {
	if(!is_user_alive(id))
		return HAM_IGNORED
		
	set_task(1.0, "showPlayerHud", id + g_Task[TASK_HUD])
	
	return HAM_IGNORED
}

public event_DeathMsg() {
	new iAttacker = read_data(1)
	new iVictim = read_data(2)
	new iHs = read_data(3)
	
	if(iAttacker != iVictim && ( get_user_team(iAttacker) != get_user_team(iVictim) )) {
		new iExp = iHs ? g_CvarValue[KILL_HS] : g_CvarValue[KILL]
		
		g_Player[iAttacker][PLAYER_EXP] += iExp
		
		set_hudmessage(0, 0, 255, -1.0, -1.0,_,_,0.4, _, 0.1, 2)
		show_hudmessage(iAttacker, "+%d", iExp)		
		
		checkLevel(iAttacker)
	}
		
}

public showPlayerHud(id) {
	new iTask = id
	id-=g_Task[TASK_HUD]
	
	if(is_user_alive(id)) {
		set_hudmessage(62, 63, 142, 0.0, 0.18, 0, 0.1, 1.05)
		show_hudmessage(id, "Poziom: %d^nEXP: %d / %d (+ %d)", g_Player[id][PLAYER_LEVEL], g_Player[id][PLAYER_EXP], get_level_exp(g_Player[id][PLAYER_LEVEL]), ( get_level_exp(g_Player[id][PLAYER_LEVEL]) - g_Player[id][PLAYER_EXP]) )
	}
	else {
		new target = pev(id, pev_iuser2)
		
		set_hudmessage(228, 155, 28, 0.51, 0.61, 0, 0.1, 1.05)
		show_hudmessage(id, "Poziom: %d^nEXP: %d / %d (+ %d)", g_Player[target][PLAYER_LEVEL], g_Player[target][PLAYER_EXP], get_level_exp(g_Player[target][PLAYER_LEVEL]), ( get_level_exp(g_Player[target][PLAYER_LEVEL]) - g_Player[id][PLAYER_EXP] ) )
	}
	
	set_task(1.0, "showPlayerHud", iTask)
}
		
public bomb_planted(id) {
	if(is_user_alive(id)) {
	        new iExp = gCvarValue[PLANT_BOMB]
		g_Player[id][PLAYER_EXP] += iExp
		client_print(0, 3, "%s +%d expa za podlozenie bomby!", gszPrefix, iExp)
		
		checkLevel(id)
	}
}
public bomb_defused(id) {
	if(is_user_alive(id)) {
	        new iExp = gCvarValue[DEFUSE_BOMB]
		g_Player[id][PLAYER_EXP] += iExp
		client_print(0,3, "%s +%d expa za rozbrojenie bomby!", gszPrefix, iExp)
		
		checkLevel(id)
	}
}

public get_level_exp(iLevel) {
	return gTableExp ? giExzpTable[iLevel] : floatround((power(iLeveL, gTableMultiplier_Power) * gTableMultiplier_1)*gTableMultiplier_2)
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1045\\ f0\\ fs16 \n\\ par }
*/
