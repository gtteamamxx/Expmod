/* Plugin generated by AMXX-Studio 

Mod autorstwa GT Team

@Wymagania
- AMXX 1.8.3
- Modul Cvar_Util
*/

#include <amxmisc>
#include <amxmodx>
#include <fun>
#include <cstrike>
#include <hamsandwich>
#include <fakemeta>
#include <cvar_util>
#include <csx>
#include <engine>
#include <nvault>
#include <colorchat>

#define PLUGIN "ExpMod v2"
#define VERSION "2.0"
#define AUTHOR "GT Team"

#define SHOP_MAX_ITEMS 30
#define MAX_PLAYER 32

/* Tabela doswiadczenia - 300 poziomow */
/* [Table EXP] - 300 levels */

new giExpTable[] = { 113, 461, 1043, 1860, 2903, 4189, 5701, 7447, 9428, 11636, 14086, 16763, 19674, 22819, 26191, 29805, 
	 33646, 37722, 42032, 46568, 51347, 56352, 61592, 67066, 72767, 78710, 84880, 91284, 97923, 104788, 111896, 119230, 126798, 134601, 
	 142631, 150903, 159402, 168135, 177102, 186296, 195732, 205395, 215293, 225425, 235783, 246384, 257211, 268273, 279569, 291092, 302857,
	 314849, 327075, 339536, 352223, 365153, 378309, 391699, 405324, 419176, 433270, 447591, 462146, 476935, 491951, 507209, 522694, 538414, 
	 554368, 570548, 586971, 603620, 620504, 637622, 654967, 672554, 690368, 708416, 726699, 745208, 763960, 782938, 802150, 821597, 841271, 
	 861187, 881330, 901707, 922318, 943156, 964236, 985543, 1007085, 1028861, 1050863, 1073108, 1095579, 1118285, 1141225, 1164392, 1187801, 1211437, 
	 1235307, 1259412, 1283743, 1308317, 1333117, 1358151, 1383420, 1408916, 1434654, 1460619, 1486818, 1513251, 1539911, 1566813, 1593942, 1621306, 
	 1648904, 1676728, 1704795, 1733088, 1761616, 1790378, 1819367, 1848598, 1878056, 1907748, 1937675, 1967828, 1998224, 2028846, 2059702, 2090793, 
	 2122111, 2153671, 2185458, 2217479, 2249734, 2282216, 2314940, 2347891, 2381077, 2414497, 2448143, 2482032, 2516147, 2550497, 2585081, 2619892, 
	 2654945, 2690225, 2725739, 2761488, 2797463, 2833681, 2870125, 2906803, 2943716, 2980856, 3018238, 3055847, 3093690, 3131767, 3170071, 3208617, 3247390,
	 3286398, 3325640, 3365108, 3404819, 3444756, 3484928, 3525334, 3565967, 3606842, 3647944, 3689280, 3730851, 3772648, 3814688, 3856954, 3899454, 3942189, 3985151, 
	 4028355, 4071786, 4115451, 4159350, 4203477, 4247844, 4292440, 4337269, 4382333, 4427624, 4473156, 4518915, 4564909, 4611137, 4657593, 4704289, 4751213, 4798371, 
	 4845764, 4893384, 4941245, 4989333, 5037656, 5086212, 5134997, 5184022, 5233275, 5282762, 5332483, 5382432, 5432621, 5483039, 5533690, 5584576, 5635689, 5687043, 
	 5738624, 5790440, 5842490, 5894768, 5947286, 6000032, 6053012, 6106227, 6159669, 6213352, 6267262, 6321407, 6375785, 6430392, 6485239, 6540314, 6595623, 6651166, 
	 6706937, 6762948, 6819188, 6875661, 6932369, 6989304, 7046480, 7103883, 7161521, 7219393, 7277493, 7335833, 7394401, 7453203, 7512240, 7571504, 7631009, 7690741, 
	 7750708, 7810908, 7871337, 7932006, 7992903, 8054034, 8115399, 8176992, 8238825, 8300887, 8363182, 8425712, 8488469, 8551467, 8614693, 8678152, 8741846, 8805768, 
	 8869930, 8934320, 8998945, 9063803, 9128889, 9194216, 9259770, 9325559, 9391582, 9457832, 9524323, 9591042, 9657995, 9725182, 9792597, 9860253, 9928136, 9996253, 
	 10064605, 10133184, 10202004, 10271052, 10340333, 10409849
}

/* Pliki [FILES]*/

new gszCvarFile[] = "addons/amxmodx/configs/exp_cvars.cfg"
new gszConfigFile[] = "addons/amxmodx/configs/exp_config.cfg";
new gszLogFile[] = "ExpMod_2.log";
new gszLangFile[] = "ExpMod.txt"

/* Prefix modu [Prefix of mod]*/

new gszPrefix[] = "[EXPMOD]"
new gszPrefixShop[] = "[EXPMOD: SKLEP]";

/* Zmienne przechowywujace informacje o graczu */
/* This's keeping information about a player */

enum e_PlayerInfo {
	PLAYER_NICK[33],
	PLAYER_LEVEL,
	PLAYER_EXP,
	PLAYER_COINS,
	PLAYER_POINTS,
	PLAYER_ULTRA_POINTS,
	PLAYER_MEGA_POINTS,
	PLAYER_HEALTH,
	PLAYER_SPEED,
	PLAYER_GRAVITY,
	PLAYER_MONEY,
	PLAYER_DAMAGE,
	PLAYER_LONG_JUMP,
	Float:PLAYER_LONG_JUMP_TIME,
	PLAYER_JUMPS,
	PLAYER_INVISIBLE,
	PLAYER_LIGHTING,
	Float:PLAYER_LIGHTING_TIME,
	PLAYER_STRENGHT,
	PLAYER_RESPAWN,
	PLAYER_CRITICAL,
	PLAYER_FAST_STATS,
	bool:PLAYER_VIP,
	PLAYER_TARGET
}

/* Zmienne przechowywujace pointer i wartosci cvarow */
/* This's keeping pointer and cvar values */

enum e_CvarInfo {
	CVAR_KILL,
	CVAR_KILL_COIN,
	CVAR_KILL_HS,
	CVAR_KILL_HS_COIN,
	CVAR_KILL_KNIFE,
	CVAR_KILL_KNIFE_COIN,
	CVAR_PLANT_BOMB,
	CVAR_PLANT_BOMB_COIN,
	CVAR_DEFUSE_BOMB,
	CVAR_DEFUSE_BOMB_COIN,
	CVAR_SHOW_HEALTH,
	CVAR_NEXT_LEVEL_COIN,
	CVAR_VIP_CONNECT_MSG,
	CVAR_VIP_DISCONNECT_MSG,
	CVAR_VIP_TABLE_STATUS,
	CVAR_VIP_CHAT_PREFIX,
	CVAR_CHAT_LEVEL_PREFIX,
	CVAR_HOSTAGE_RESCUE,
	CVAR_HOSTAGE_RESCUE_COIN,
	CVAR_WIN_ROUND,
	CVAR_WIN_ROUND_COIN,
	CVAR_CMD_SHOW_INFO,
	CVAR_MENU_ADMIN,
	CVAR_CHAT_ADMIN_QUITE,
	CVAR_CHAT_LEVEL_RATIO,
	CVAR_CHAT_RESPAWN_MSG,
	CVAR_CHAT_CENTER_MSG,
	CVAR_SHOW_HUD_KILL_EXP,
	CVAR_CHAT_KILL_COIN_MSG,
	CVAR_CHAT_PLANT_B_EXP_MSG,
	CVAR_CHAT_PLANT_B_COIN_MSG,
	CVAR_CHAT_DEFUSE_B_EXP_MSG,
	CVAR_CHAT_DEFUSE_B_COIN_MSG,
	CVAR_CHAT_WIN_ROUND_EXP_MSG,
	CVAR_CHAT_WIN_ROUND_COIN_MSG
}

enum e_TaskNum {
	TASK_HUD = 217
}

/* Umiejetnosci [SKILLS]*/

enum e_PointsInfo { 
	bool:POINTS,
	POINTS_MULTIPLIER,
	POINTS_LEVEL_RATIO,
	//
	bool:POINTS_HEALTH,
	POINTS_HEALTH_MULTIPLIER,
	POINTS_HEALTH_MAX_POINTS,
	//
	bool:POINTS_SPEED,
	Float:POINTS_SPEED_MULTIPLIER,
	POINTS_SPEED_MAX_POINTS,
	//
	bool:POINTS_GRAVITY,
	Float:POINTS_GRAVITY_MULTIPLIER,
	POINTS_GRAVITY_MAX_POINTS,
	//
	bool:POINTS_MONEY,
	POINTS_MONEY_MULTIPLIER,
	POINTS_MONEY_MAX_POINTS,
}

enum e_UltraPointsInfo {
	bool:ULTRA_POINTS,
	ULTRA_POINTS_MULTIPLIER,
	ULTRA_POINTS_LEVEL_RATIO,
	//
	bool:ULTRA_POINTS_DAMAGE,
	Float:ULTRA_POINTS_DAMAGE_MULTIPLIER,
	ULTRA_POINTS_DAMAGE_MAX_POINTS,
	//
	bool:ULTRA_POINTS_LONG_JUMP,
	Float:ULTRA_POINTS_LONG_J_MULTIPLIER,
	Float:ULTRA_POINTS_LONG_J_DELAY_MIN,
	Float:ULTRA_POINTS_LONG_J_DELAY_MAX,
	ULTRA_POINTS_LONG_J_MAX_POINTS,
	//
	bool:ULTRA_POINTS_JUMPS,
	ULTRA_POINTS_JUMPS_MULTIPLIER,
	ULTRA_POINTS_JUMPS_MAX_POINTS,
	//
	bool:ULTRA_POINTS_INVIS,
	bool:ULTRA_POINTS_INVIS_ONLY_KNIFE,
	ULTRA_POINTS_INVIS_MIN_LEVEL,
	ULTRA_POINTS_INVIS_MAX_POINTS,
	
}

enum e_MegaPointsInfo {
	bool:MEGA_POINTS,
	MEGA_POINTS_MULTIPLIER,
	MEGA_POINTS_LEVEL_RATIO,
	//
	bool:MEGA_POINTS_LIGHTING,
	MEGA_POINTS_LIGHTING_MULTIPLIER,
	Float:MEGA_POINTS_LIGHTING_DAMAGE,
	Float:MEGA_POINTS_LIGHTING_DELAY_MIN,
	Float:MEGA_POINTS_LIGHTING_DELAY_MAX,
	MEGA_POINTS_LIGHTING_MAX_POINTS,
	//
	bool:MEGA_POINTS_STRENGHT,
	Float:MEGA_POINTS_STRENGHT_MULTIPLIER,
	MEGA_POINTS_STRENGHT_MAX_POINTS,
	//
	bool:MEGA_POINTS_RESPAWN,
	MEGA_POINTS_RESPAWN_MULTI_MAX,
	MEGA_POINTS_RESPAWN_MULTI_MIN,
	MEGA_POINTS_RESPAWN_MAX_POINTS,
	//
	bool:MEGA_POINTS_CRITICAL,
	Float:MEGA_POINTS_CRITICAL_MULTIPLIER,
	MEGA_POINTS_CRITICAL_CHANCE_MAX,
	MEGA_POINTS_CRITICAL_CHANCE_MIN,
	MEGA_POINTS_CRITICAL_MAX_POINTS
	
}

/* =========================================== */

new g_PlayerInfo[ MAX_PLAYER+1 ][ e_PlayerInfo ]

new g_CvarPointer[ e_CvarInfo ];
new g_CvarValue[ e_CvarInfo ];

new g_Task[ e_TaskNum ]

new bool:g_FastStats[3];
new g_FastStatsValue[7];
new g_FastStatsNum;

new g_ShowHealthColor[3]
new Float:g_ShowHealthPosition[2];
new Float:g_RefreshHudTime

new bool:g_Reset		//0 - wylaczone, 1 - wlaczone
new g_ResetPoints[2]		//0 - status, 1 - cena
new g_ResetUltraPoints[2]	//j.w
new g_ResetMegaPoints[2]	//j.w

/* =========================================== */

new g_AdminMenuFlag

new g_VipStatus
new g_VipFlag
new g_VipBonus[3]               // 0 - HP, 1 - SPEED, 2 - COINS
new Float:g_VipExpMultiplier
new g_SpriteLighting

/* =========================================== */

new bool:gTableExp;

new Float:gTableMultiplier_1;
new Float:gTableMultiplier_2;

new gTableMultiplier_FirstLevelExp;
new gTableMultiplier_Power;
new gTableMultiplier_MaxLevel;

/* =========================================== */

new g_PointsInfo[ e_PointsInfo ]
new g_UltraPointsInfo[ e_UltraPointsInfo ]
new g_MegaPointsInfo[ e_MegaPointsInfo ]

new g_SyncHudDamage;

new g_MinPlayers;

new g_ShopStatus;

new g_ShopItemsName[SHOP_MAX_ITEMS+1][33];
new g_ShopItemsDesc[SHOP_MAX_ITEMS+1][128];
new g_ShopItemsPrice[SHOP_MAX_ITEMS+1];
new g_ShopPluginIndex[SHOP_MAX_ITEMS+1];

new g_ShopOnlyAlive[SHOP_MAX_ITEMS+1]
new g_ShopOnePerRound[SHOP_MAX_ITEMS+1];
new g_ShopPlayerBuy[33][SHOP_MAX_ITEMS+1];

new g_ShopItemsNum;

/* =========================================== */

new bool:g_isFreezeTime

/* =========================================== */

new g_nVaultFile;
new g_nVaultFile_ExpireDays;
new g_nVaultFile_MinLevelSave;
new g_nVaultFile_Mode;
new g_nVaultFile_SaveBots;
new Float:g_nVaultFile_AutoSave_Delay

/* =========================================== */

new g_ForwardItemSelectedPre;
new g_ForwardItemSelectedPost;

/* =========================================== */

public plugin_precache() {
	g_SpriteLighting = precache_model("sprites/lgtning.spr")
}

public plugin_natives() {
	register_native("exp_shop_register_item", "shop_register_item", 1);
	register_native("exp_user_check_level", "checkLevel", 1);
	register_native("exp_get_user_info", "_get_user_info", 1);
}

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)

	g_nVaultFile = nvault_open("ExpMod");

	/* Plik jezykowy */
	
	register_dictionary(gszLangFile)
	
	register_event("DeathMsg", "event_DeathMsg", "a")
	register_event("HLTV", 	"event_RoundStartHLTV", "a", "1=0", "2=0");
	register_event("CurWeapon", "event_CurWeapon", "be")
	register_event("Damage", "event_Damage", "b", "2!=0");
        register_event("SendAudio", "event_WinTT", "a", "2&%!MRAD_terwin");
	register_event("SendAudio", "event_WinCT", "a", "2&%!MRAD_ctwin");
	
	register_logevent("logevent_RoundStart", 2, "1=Round_Start");
	register_logevent("HostageRescue",3,"2=Rescued_A_Hostage")

	RegisterHam(Ham_Spawn, "player", "PlayerSpawn", 1)
	RegisterHam(Ham_CS_Player_ResetMaxSpeed, "player", "SetSpeed", 1)
	RegisterHam(Ham_TakeDamage, "player", "TakeDamage", 0)
	RegisterHam(Ham_Killed, "player", "PlayerKilled", 1)
	
	register_forward(FM_CmdStart,  "CmdStart");

	/* Komendy */
	/* Commends */

        /* Admin Menu */
	
	register_clcmd("cmdMenuAddExp",	"cmdMenuAddExp");
	register_clcmd("cmdMenuAddCoins","cmdMenuAddCoins");
	register_clcmd("cmdMenuAddLevel","cmdMenuAddLevel");
	register_clcmd("cmdMenuSetExp",	"cmdMenuSetExp");
	register_clcmd("cmdMenuSetCoins","cmdMenuSetCoins");
	register_clcmd("cmdMenuSetLevel","cmdMenuSetLevel");
	
	register_clcmd("menu", "cmdmenuPlayer");
	register_clcmd("say /menu", "cmdmenuPlayer");
	register_clcmd("say_team /menu", "cmdmenuPlayer");
	register_clcmd("say /sklep", "cmdmenuShop");
	register_clcmd("say_team /sklep", "cmdmenuPlayer");
	register_clcmd("say /shop", "cmdmenuShop");
	register_clcmd("say_team /shop", "cmdmenuShop");
	
	register_clcmd("say /exp", "cmdmenuPlayerInfo")
	register_clcmd("say /poziom", "cmdmenuPlayerInfo")
	register_clcmd("say /lvl", "cmdmenuPlayerInfo")
	register_clcmd("say /info", "cmdmenuPlayerInfo")
	register_clcmd("say /next", "cmdmenuPlayerInfo")
	
	register_clcmd("radio2", "cmdUseLighting")
	
	/* Wczytanie konfiguracji modu */
	/* Loading configuration of mod */

	g_SyncHudDamage = CreateHudSyncObj();

        register_message(get_user_msgid("ScoreAttrib"), "messageScoreAttrib");
        register_message(get_user_msgid("SayText"),"handleSayText");

	RegisterCvars()
	LoadConfig()

	if(g_nVaultFile != INVALID_HANDLE && g_nVaultFile_AutoSave_Delay)
	        set_task(g_nVaultFile_AutoSave_Delay, "AutoSave",  151, _, _, "b")
}

public AutoSave(task) {
        if(get_playersnum() <= 0 || get_playersnum() < g_MinPlayers)
                return

	for(new i = 1 ; i <=  MAX_PLAYERS; i++) {
		if(!is_user_connected(i) || is_user_hltv(i))
			continue;
	        saveData(i)
	}
}
public plugin_cfg() {
        if(g_nVaultFile != INVALID_HANDLE)
		nvault_prune(g_nVaultFile , 0 , get_systime() - ( g_nVaultFile_ExpireDays * 86400 ) );
	else
		log_amx("Cannot load a nvault data file : ^"ExpMod^"")
}

public RegisterCvars() { 
	/* Rejestrowanie cvarow */
	/* Registring cvars */
	
	g_CvarPointer[CVAR_KILL] = 		CvarRegister("exp_kill", 		"180", _,_, true, 1.0, false, _, true);
	g_CvarPointer[CVAR_KILL_COIN] = 	CvarRegister("exp_kill_coin", 		"1", _, _, false, _, false, _, true);
	g_CvarPointer[CVAR_KILL_HS] = 		CvarRegister("exp_kill_hs", 		"250", _,_, true, 1.0, false, _, true);
	g_CvarPointer[CVAR_KILL_HS_COIN] = 	CvarRegister("exp_kill_hs_coin",	"2", _, _, false, _, false, _, true);
	g_CvarPointer[CVAR_KILL_KNIFE] = 	CvarRegister("exp_kill_knife", 		"100", _,_, false, _, false, _, true);
	g_CvarPointer[CVAR_KILL_KNIFE_COIN] = 	CvarRegister("exp_kill_knife_coin",	"1", _, _, false, _, false, _, true);
	g_CvarPointer[CVAR_PLANT_BOMB] = 	CvarRegister("exp_plant_bomb", 		"350", _,_,false, _, false, _, true);
	g_CvarPointer[CVAR_PLANT_BOMB_COIN] = 	CvarRegister("exp_plant_bomb_coin",	"2",_,_,false, _, false, _, true);
	g_CvarPointer[CVAR_DEFUSE_BOMB] = 	CvarRegister("exp_defuse_bomb", 	"350", _,_,false, _, false, _, true);
	g_CvarPointer[CVAR_DEFUSE_BOMB_COIN] = 	CvarRegister("exp_defuse_bomb_coin",	"2",_,_,false, _, false, _, true);
	g_CvarPointer[CVAR_SHOW_HEALTH] = 	CvarRegister("exp_show_health", 	"1", _,  _,true, 0.0, true, 1.0, true);
	g_CvarPointer[CVAR_NEXT_LEVEL_COIN] =	CvarRegister("exp_next_level_coin",	"5",_,_,false, _, false, _, true);
	g_CvarPointer[CVAR_VIP_CONNECT_MSG] =	CvarRegister("exp_vip_connect_msg",	"1",_,_,true, 0.0, true, 1.0, true);
	g_CvarPointer[CVAR_VIP_DISCONNECT_MSG] =CvarRegister("exp_vip_disconnect_msg",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_VIP_TABLE_STATUS] =	CvarRegister("exp_vip_table_status",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_VIP_CHAT_PREFIX] =	CvarRegister("exp_vip_chat_prefix",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_LEVEL_PREFIX] =	CvarRegister("exp_chat_level_prefix",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_HOSTAGE_RESCUE] =	CvarRegister("exp_hostage_rescue",	"250",_,_,false,_,false, _, true);
	g_CvarPointer[CVAR_HOSTAGE_RESCUE_COIN]=CvarRegister("exp_hostage_rescue_coin",	"2",_,_,false,_,false, _, true);
	g_CvarPointer[CVAR_WIN_ROUND] 	=	CvarRegister("exp_win_round",		"175",_,_,false,_,false, _, true);
	g_CvarPointer[CVAR_WIN_ROUND_COIN] =	CvarRegister("exp_win_round_coin",	"1",_,_,false,_,false, _, true);
	g_CvarPointer[CVAR_CMD_SHOW_INFO] =	CvarRegister("exp_cmd_show_info",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_MENU_ADMIN] =	CvarRegister("exp_menu_admin",		"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_ADMIN_QUITE] =	CvarRegister("exp_chat_admin_quite",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_LEVEL_RATIO] =	CvarRegister("exp_chat_level_ratio",	"4",_,_,false,_,false,_,true);
	g_CvarPointer[CVAR_CHAT_RESPAWN_MSG] =	CvarRegister("exp_chat_respawn_msg",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_CENTER_MSG] =	CvarRegister("exp_chat_center_msg",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_SHOW_HUD_KILL_EXP] =	CvarRegister("exp_show_hud_kill_exp",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_KILL_COIN_MSG] =CvarRegister("exp_chat_kill_coin_msg",	"1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_PLANT_B_EXP_MSG]=CvarRegister("exp_chat_plant_b_exp_msg","1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_PLANT_B_COIN_MSG]=CvarRegister("exp_chat_plant_b_coin_msg","1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_DEFUSE_B_EXP_MSG]=CvarRegister("exp_chat_defuse_b_exp_msg","1",_,_,true,0.0,true,1.0, true);
	g_CvarPointer[CVAR_CHAT_DEFUSE_B_COIN_MSG]=CvarRegister("exp_chat_defuse_b_coin_msg","1",_,_,true,0.0,true,1.0, true);
        g_CvarPointer[CVAR_CHAT_WIN_ROUND_EXP_MSG]=CvarRegister("exp_chat_win_round_exp_msg","1",_,_,true,0.0,true,1.0, true);
        g_CvarPointer[CVAR_CHAT_WIN_ROUND_COIN_MSG]=CvarRegister("exp_chat_win_round_coin_msg","1",_,_,true,0.0,true,1.0, true);
	
	/* Przekazanie wartosci cvarow wartosci do zmiennych */
	/* Setting values of cvars to changes [?]*/
	
	for(new i; i < _:e_CvarInfo;i++)
		CvarCache(g_CvarPointer[e_CvarInfo:i], CvarType_Int, g_CvarValue[e_CvarInfo:i])
}

/* =========================================== */

public event_RoundStartHLTV()
	g_isFreezeTime = true

public logevent_RoundStart()
	g_isFreezeTime = false

public client_connect(id) {
	ResetPlayerInformation(id)
	
	get_user_name(id, g_PlayerInfo[id][PLAYER_NICK], 32)       
}

public cmdmenuPlayerInfo(id) {
	if(g_CvarValue[CVAR_CMD_SHOW_INFO]) {
		new szFormat[256];

		formatex(szFormat, charsmax(szFormat), 	"\yExpMod v2 by \rGT Team\w^n%L:\y %d\w [\r %d\w /\r %d \w]^n%L %L",
		id, "LEVEL", get_user_level(id), get_user_exp(id), get_level_exp(get_user_level(id)), id, "MENU_PLAYER_INFO_1",(get_level_exp(get_user_level(id)) -  get_user_exp(id)), floatround(( get_level_exp(get_user_level(id)) - get_user_exp(id)) / (g_CvarValue[CVAR_KILL] * 1.2 ), floatround_ceil), id, "MENU_PLAYER_INFO_2",g_PlayerInfo[id][PLAYER_COINS])

		new iMenu = menu_create(szFormat, "cmdmenuPlayerInfoH")
		menu_additem(iMenu, "OK");

		formatex(szFormat, charsmax(szFormat), "%L", id, "REFRESH")
		menu_additem(iMenu, szFormat);

		menu_display(id, iMenu);
	}
}

public cmdmenuPlayerInfoH(id, menu, item) {
	if(item != 1) {
		menu_destroy(menu)
		return;
	}
	cmdmenuPlayerInfo(id);
}
/* Sprawdza, czy gracz jest VIP'em */
public client_authorized(id) {
	if(g_VipStatus) {
	        new szString[2]
                setc(szString, 1, g_VipFlag)

	        if(get_user_flags(id) & read_flags(szString)) {
	                g_PlayerInfo[id][PLAYER_VIP] = true

	                if(g_CvarValue[CVAR_VIP_CONNECT_MSG])
	               		ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_VIP_CONNECT", g_PlayerInfo[id][PLAYER_NICK])          
                }
        } 

        loadData(id)
}
public client_disconnect(id) {
        if(is_user_vip(id) && g_CvarValue[CVAR_VIP_DISCONNECT_MSG])
                ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_VIP_DISCONNECT", g_PlayerInfo[id][PLAYER_NICK])

     	saveData(id);
     
	ResetPlayerInformation(id);
}

new g_Round
public event_WinTT() {
	if(g_Round++ <= 1 || (!g_CvarValue[CVAR_WIN_ROUND] && !g_CvarValue[CVAR_WIN_ROUND_COIN]) || get_playersnum() < g_MinPlayers)
		return PLUGIN_CONTINUE;

	for(new i = 1;i <= MAX_PLAYER; i++) {
		if(!is_user_connected(i))
			continue;
		if(get_user_team(i) == 1) {
			msg_win_round(i)
			checkLevel(i)
		}
	}
	return PLUGIN_CONTINUE;
}

public event_WinCT() {
	if(g_Round++ <= 1 || (!g_CvarValue[CVAR_WIN_ROUND] && !g_CvarValue[CVAR_WIN_ROUND_COIN]) || get_playersnum() < g_MinPlayers)
		return PLUGIN_CONTINUE;
		
	for(new i = 1;i <= MAX_PLAYER; i++) {
		if(!is_user_connected(i))
			continue;
		if(get_user_team(i) == 2) {
			msg_win_round(i)
			checkLevel(i)
		}
	}
	return PLUGIN_CONTINUE;
}

msg_win_round(id) {
        new iExp = g_CvarValue[CVAR_WIN_ROUND]
        iExp += (is_user_vip(id)  ? (floatround(float(iExp) * g_VipExpMultiplier)) : 0)

	if(iExp) {
		g_PlayerInfo[id][PLAYER_EXP] += iExp
		if(g_CvarValue[CVAR_CHAT_WIN_ROUND_EXP_MSG])
		        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_WIN_ROUND_1", iExp)
              
		checkLevel(id)
	}
	new iCoins =  g_CvarValue[CVAR_WIN_ROUND_COIN] + (is_user_vip(id)?g_VipBonus[2]:0);
	
	if(iCoins) {
	        if(g_CvarValue[CVAR_CHAT_WIN_ROUND_COIN_MSG])
		        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_WIN_ROUND_2", iCoins)
               
		g_PlayerInfo[id][PLAYER_COINS] += iCoins
        }
}

public event_Damage(id) {
        
	new attacker = get_user_attacker(id);
	new iDamage = read_data(2);
	
	if(!is_user_connected(attacker))
		return
		
	if(get_user_team(id) != get_user_team(attacker)) {
		set_hudmessage(0, 127, 255, 0.54, 0.54, 0, 6.0, 0.5)
		ShowSyncHudMsg(attacker, g_SyncHudDamage, "%d", iDamage)

		set_hudmessage(255, 0, 0, 0.5, 0.54, 0, 6.0, 0.5)
		ShowSyncHudMsg(id, g_SyncHudDamage, "%d", iDamage)
	}
}

public cmdUseLighting(id) {
	if(!is_user_alive(id) || !g_PlayerInfo[id][PLAYER_LIGHTING])
		return
		
	new Float:AimedOrigin[3], Origin[3], entlist[1]
	new Float:fTime = g_PlayerInfo[id][PLAYER_LIGHTING] == 1? g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX] : (g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX] - ( (g_PlayerInfo[id][PLAYER_LIGHTING] - 1) * ((g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX] - g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX]) / (g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MAX_POINTS] - 1)) ) )
	
	get_user_origin(id, Origin, 3)
	IVecFVec(Origin, AimedOrigin)
	
	find_sphere_class(0, "player", 80.0, entlist, 1, AimedOrigin)

	if(get_gametime() < g_PlayerInfo[id][PLAYER_LIGHTING_TIME] + 1.0) {
		return
	} else if((get_gametime() < (g_PlayerInfo[id][PLAYER_LIGHTING_TIME] + fTime))) {
		client_print(id, print_center, "%L", id, "MSG_USE_SKILL_LIGHTING_1", (((g_PlayerInfo[id][PLAYER_LONG_JUMP_TIME] + fTime)*10)*0.1)-get_gametime())
        	return
	} else if(!is_user_alive(entlist[0]) || id == entlist[0]) {
		client_print(id, print_center, "%L", id, "MSG_USE_SKILL_LIGHTING_2")
		return
	} else if(get_user_team(id) == get_user_team(entlist[0])) {
		client_print(id, print_center, "%L", id, "MSG_USE_SKILL_LIGHTING_3")
		return 
	} 
	g_PlayerInfo[id][PLAYER_LIGHTING_TIME] = get_gametime()
	
	new Float:fDamage = (g_PlayerInfo[id][PLAYER_LIGHTING] * (g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MULTIPLIER] * g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DAMAGE] ) )
	
	client_print(id, print_center, "%L", id, "MSG_USE_SKILL_LIGHTING_4", fDamage, g_PlayerInfo[entlist[0]][PLAYER_NICK])
		
	//emit_sound(id, CHAN_AUTO, "ExpModv2/player_use_lighting.wav", 1.0, ATTN_NORM, 0, PITCH_NORM); 
	ExecuteHamB(Ham_TakeDamage, entlist[0], id, id, fDamage, DMG_BLAST)
	
	Create_Lighting(id, entlist[0], 0, 1, 10, 20, 20, 255, 255, 255, 255, 3)
	
	return
}

/* Menu gracza */
public cmdmenuPlayer(id) {
	new szFormat[33];

	new iMenu = menu_create("ExpMod v2 by \rGT \yTeam", "cmdmenuPlayerH");
	new iCb = menu_makecallback("cmdmenuPlayerCb");
		
	formatex(szFormat, charsmax(szFormat), "%L", id, points_enabled()?"MENU_PLAYER_OPTION_1":"POINTS_DISABLED", g_PlayerInfo[id][PLAYER_POINTS]);
	menu_additem(iMenu, szFormat, _, _, iCb);
	
	formatex(szFormat, charsmax(szFormat), "%L", id, ultra_points_enabled()?"MENU_PLAYER_OPTION_2":"ULTRA_POINTS_DISABLED", g_PlayerInfo[id][PLAYER_ULTRA_POINTS]);
	menu_additem(iMenu, szFormat, _, _, iCb);
	
	formatex(szFormat, charsmax(szFormat), "%L", id, mega_points_enabled()?"MENU_PLAYER_OPTION_3":"MEGA_POINTS_DISABLED", g_PlayerInfo[id][PLAYER_MEGA_POINTS]);
	menu_additem(iMenu, szFormat, _, _, iCb);
	
	formatex(szFormat, charsmax(szFormat), "%L", id, g_Reset ? "MENU_PLAYER_OPTION_4" : "RESET_DISABLED")
	menu_additem(iMenu, szFormat, _, _, iCb);

	formatex(szFormat, charsmax(szFormat), "Sklep")
	if(!g_ShopItemsNum)
		formatex(szFormat, charsmax(szFormat), "Sklep [Brak przedmiotow]")
	if(!g_ShopStatus)
		formatex(szFormat, charsmax(szFormat), "Sklep [Wylaczony]")
		
	menu_additem(iMenu, szFormat, _, _, iCb);

        if(g_CvarValue[CVAR_MENU_ADMIN] && has_acces_to_menu(id)) {
                g_PlayerInfo[id][PLAYER_TARGET] = 0 
	        formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_PLAYER_OPTION_5")
	        menu_additem(iMenu, szFormat, _, _, iCb);
	}
	menu_display(id, iMenu);
}

public cmdmenuPlayerCb(id, menu, item) {
	item ++;
	
	if((item == 1 && !points_enabled()) 
	|| (item == 2 && !ultra_points_enabled())
	|| (item == 3 && !mega_points_enabled())
	|| (item == 4 && !g_Reset)
	|| (item == 5 && !g_ShopItemsNum) || (item == 5 && !g_ShopStatus))
		return ITEM_DISABLED
	
	return ITEM_ENABLED
}

public cmdmenuPlayerH(id, menu, item) {
	if(item == MENU_EXIT)  {
		menu_destroy(menu)
		return PLUGIN_CONTINUE;
	}
	
	switch(++item) {
		case 1: menuPoints(id)
		case 2: menuUltraPoints(id)
		case 3: menuMegaPoints(id)
		case 4: menuReset(id)
		case 5: cmdmenuShop(id)
		case 6: MenuAdmin(id)
	}
	return PLUGIN_CONTINUE
}

/* Menu Admina */

public MenuAdmin(id) {
	new szFormat[33]
	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ADMIN_TITLE")
	
	new menu = menu_create(szFormat, "MenuAdmin1")
	for(new i = 1; i <= MAX_PLAYER;i++) {
		if(!is_user_connected(i) || is_user_hltv(i))
			continue;
			
		new szData[2]
		num_to_str(i, szData, 1)
		menu_additem(menu, g_PlayerInfo[i][PLAYER_NICK], szData)
	}
	menu_display(id, menu)
}
public MenuAdmin1(id, menu, item) {
	if(item == MENU_EXIT) {
	        g_PlayerInfo[id][PLAYER_TARGET] = 0
		menu_destroy(menu)
		return PLUGIN_CONTINUE
	}

	new acces, szData[2], cb
	menu_item_getinfo(menu, item, acces, szData, 1, _, _, cb)
        new target = str_to_num(szData)
	g_PlayerInfo[id][PLAYER_TARGET] = target
	new szTitle[128], szFormat[33]
	
	formatex(szTitle, charsmax(szTitle), "\w%L: \y%s^n\w%L: \y%d^n\wExp: \y%d\w / \y%d^n\w%L: \y%d", id, "PLAYER", g_PlayerInfo[target][PLAYER_NICK], id, "LEVEL", g_PlayerInfo[target][PLAYER_LEVEL], g_PlayerInfo[target][PLAYER_EXP], get_level_exp(g_PlayerInfo[target][PLAYER_EXP]), id, "COINS", g_PlayerInfo[target][PLAYER_COINS])
	
	new menus = menu_create(szTitle, "MenuAdmin2")

	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ADMIN_OPTION_1")
	menu_additem(menus, szFormat)

	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ADMIN_OPTION_2")
	menu_additem(menus, szFormat)

	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ADMIN_OPTION_3")
	menu_additem(menus, szFormat)

	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ADMIN_OPTION_4")
	menu_additem(menus, szFormat)

	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ADMIN_OPTION_5")
	menu_additem(menus, szFormat)
	
	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ADMIN_OPTION_6")
	menu_additem(menus, szFormat)

	menu_display(id, menus)
	
	return PLUGIN_CONTINUE
}
public MenuAdmin2(id, menu, item) {
	if(item == MENU_EXIT) {
	        g_PlayerInfo[id][PLAYER_TARGET] = 0
		menu_destroy(menu)
		return PLUGIN_CONTINUE
	}
	switch(item) {
		case 0:MenuAdminNext(id, item)
		case 1:MenuAdminNext(id, item)
		case 2:MenuAdminNext(id, item)
		case 3:MenuAdminNext(id, item)
		case 4:MenuAdminNext(id, item)
		case 5:MenuAdminNext(id, item)
	}
	return PLUGIN_CONTINUE
}

public MenuAdminNext(index, function) {
        switch(function) {
                case 0: client_cmd(index, "messagemode cmdMenuAddExp");      
                case 1: client_cmd(index, "messagemode cmdMenuAddLevel");
                case 2: client_cmd(index, "messagemode cmdMenuAddCoins");
                case 3: client_cmd(index, "messagemode cmdMenuSetExp");    
                case 4: client_cmd(index, "messagemode cmdMenuSetLevel");
                case 5: client_cmd(index, "messagemode cmdMenuSetCoins");
       }
}
public menuMegaPoints(id) {
	new szFormat[90];
	
	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_MEGA_POINTS_TITLE_1", g_PlayerInfo[id][PLAYER_MEGA_POINTS])
	if(g_FastStats[2]) {
		new szTemp[33]
		formatex(szTemp, charsmax(szTemp), "%L", id, "MENU_MEGA_POINTS_TITLE_2", g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]])
		add(szFormat, charsmax(szFormat), szTemp)
	}
	
	new iMenu = menu_create(szFormat, "menuMegaPointsH")
	new iCb = menu_makecallback("menuMegaPointsCb");
	
	if(g_MegaPointsInfo[MEGA_POINTS_LIGHTING]) {
		new Float:fTime = g_PlayerInfo[id][PLAYER_LIGHTING] == 0? 0.0 : g_PlayerInfo[id][PLAYER_LIGHTING]== 1? g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX] : (g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX] - ( (g_PlayerInfo[id][PLAYER_LIGHTING] - 1) * ((g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX] - g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX]) / (g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MAX_POINTS] - 1)) ) )
		new Float:fDamage = (g_PlayerInfo[id][PLAYER_LIGHTING] * (g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MULTIPLIER] * g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DAMAGE] ) )
		
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_MEGA_POINTS_LIGHTING", g_PlayerInfo[id][PLAYER_LIGHTING], g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MAX_POINTS], fDamage, fTime)
		menu_additem(iMenu, szFormat, _, _, iCb);        
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "LIGHTING_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	if(g_MegaPointsInfo[MEGA_POINTS_STRENGHT]) {
		new Float:fStrenght = ( g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MULTIPLIER]*g_PlayerInfo[id][PLAYER_STRENGHT] )
		
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_MEGA_POINTS_STRENGHT", g_PlayerInfo[id][PLAYER_STRENGHT], g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MAX_POINTS], fStrenght)
		menu_additem(iMenu, szFormat,_,_, iCb);
	
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "STRENGHT_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	
	if(g_MegaPointsInfo[MEGA_POINTS_RESPAWN]) {		
		new iChance = g_PlayerInfo[id][PLAYER_RESPAWN] == 0 ? 0 : g_PlayerInfo[id][PLAYER_RESPAWN]== 1? g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MAX] : (g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MAX] - ( (g_PlayerInfo[id][PLAYER_RESPAWN] - 1) * ((g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MAX] - g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MIN]) / (g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MAX_POINTS] - 1)) ) )
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_MEGA_POINTS_RESPAWN", g_PlayerInfo[id][PLAYER_RESPAWN], g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MAX_POINTS], iChance==0?0:1, iChance)
		menu_additem(iMenu, szFormat,_,_, iCb);
		
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "RESPAWN_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
        if(g_MegaPointsInfo[MEGA_POINTS_CRITICAL]) {

                new iChance = g_PlayerInfo[id][PLAYER_CRITICAL] == 0 ? 0 : g_PlayerInfo[id][PLAYER_CRITICAL]== 1? g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MAX] : (g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MAX] - ( (g_PlayerInfo[id][PLAYER_CRITICAL] - 1) * ((g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MAX] - g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MIN]) / (g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MAX_POINTS] - 1)) ) )
                new Float:fMultiplier = (g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MULTIPLIER] * g_PlayerInfo[id][PLAYER_CRITICAL] )

        	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_MEGA_POINTS_CRITICAL", g_PlayerInfo[id][PLAYER_CRITICAL], g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MAX_POINTS], iChance==0?0:1, iChance, fMultiplier)
		menu_additem(iMenu, szFormat,_,_, iCb);

        } else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "CRITICAL_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	if(g_FastStats[2]) {
		new iNum
		if((g_PlayerInfo[id][PLAYER_FAST_STATS] + 1) >= g_FastStatsNum)
			iNum = g_FastStatsValue[0];
		else
			iNum = g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS] + 1];
		
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_POINTS_FAST_STATS", iNum )
		menu_additem(iMenu, szFormat)
	}
	
	menu_display(id, iMenu);
}

public menuMegaPointsCb(id, menu, item) {
	item++
	
	if(!g_PlayerInfo[id][PLAYER_MEGA_POINTS]
	|| (g_FastStats[2] ?( g_PlayerInfo[id][PLAYER_MEGA_POINTS] < g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]):!g_PlayerInfo[id][PLAYER_MEGA_POINTS])
	|| (item == 1 && g_PlayerInfo[id][PLAYER_LIGHTING] >= g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MAX_POINTS])
	|| (item == 1 && !g_MegaPointsInfo[MEGA_POINTS_LIGHTING])
	|| (item == 1 && g_FastStats[2] && (g_PlayerInfo[id][PLAYER_LIGHTING]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MAX_POINTS])
	|| (item == 2 && g_PlayerInfo[id][PLAYER_STRENGHT] >= g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MAX_POINTS])
	|| (item == 2 && !g_MegaPointsInfo[MEGA_POINTS_STRENGHT])
	|| (item == 2 && g_FastStats[2] && (g_PlayerInfo[id][PLAYER_STRENGHT]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MAX_POINTS])
	|| (item == 3 && g_PlayerInfo[id][PLAYER_RESPAWN] >= g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MAX_POINTS])
	|| (item == 3 && !g_MegaPointsInfo[MEGA_POINTS_RESPAWN])
	|| (item == 3 && g_FastStats[2] && (g_PlayerInfo[id][PLAYER_RESPAWN]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MAX_POINTS])
	|| (item == 4 && g_PlayerInfo[id][PLAYER_CRITICAL] >= g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MAX_POINTS])
	|| (item == 4 && !g_MegaPointsInfo[MEGA_POINTS_CRITICAL])
	|| (item == 4 && g_FastStats[2] && (g_PlayerInfo[id][PLAYER_CRITICAL]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MAX_POINTS]))
		return ITEM_DISABLED
	
	return ITEM_ENABLED
}
public menuMegaPointsH(id, menu, item) {
	if(item == MENU_EXIT) {
		menu_destroy(menu);
		return;
	}
	
	item++;
	
	switch(item) {
		/* Piorun / Lighting */
		case 1: g_PlayerInfo[id][PLAYER_LIGHTING] += g_FastStats[2] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Wyrzymalosc / Strenght  */
		case 2: g_PlayerInfo[id][PLAYER_STRENGHT] += g_FastStats[2] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Odrodzenie / Respawn */
		case 3: g_PlayerInfo[id][PLAYER_RESPAWN] += g_FastStats[2] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Krytyczne obrazenia / Critical damage */ 
		case 4: g_PlayerInfo[id][PLAYER_CRITICAL] += g_FastStats[2] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Szybkie rozdawanie statystyk / Fast Stats */
		case 5: {
			g_PlayerInfo[id][PLAYER_FAST_STATS]++
			if(g_PlayerInfo[id][PLAYER_FAST_STATS] >= g_FastStatsNum)
				g_PlayerInfo[id][PLAYER_FAST_STATS] = 0
		}
		
	}
	if(item != 5)
		g_PlayerInfo[id][PLAYER_MEGA_POINTS] -= g_FastStats[2] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1;
	
	menuMegaPoints(id);
}

public menuUltraPoints(id) {
	new szFormat[90];
	
	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ULTRA_POINTS_TITLE_1", g_PlayerInfo[id][PLAYER_ULTRA_POINTS])
	if(g_FastStats[1]) {
		new szTemp[33]
		formatex(szTemp, charsmax(szTemp), "%L", id, "MENU_ULTRA_POINTS_TITLE_2", g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]])
		add(szFormat, charsmax(szFormat), szTemp)
	}
	new iMenu = menu_create(szFormat, "menuUltraPointsH")
	new iCb = menu_makecallback("menuUltraPointsCb");
	
	if(g_UltraPointsInfo[ULTRA_POINTS_DAMAGE]) {
		new Float:iDamage = (g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MULTIPLIER] * g_PlayerInfo[id][PLAYER_DAMAGE])
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ULTRA_POINTS_DAMAGE", g_PlayerInfo[id][PLAYER_DAMAGE], g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MAX_POINTS], iDamage)
		menu_additem(iMenu, szFormat, _, _, iCb);        
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "DAMAGE_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	if(g_UltraPointsInfo[ULTRA_POINTS_LONG_JUMP]) {
		new Float:iTime = g_PlayerInfo[id][PLAYER_LONG_JUMP] == 0? 0.0 : g_PlayerInfo[id][PLAYER_LONG_JUMP ]== 1? g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MAX] : (g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MAX] - ( (g_PlayerInfo[id][PLAYER_LONG_JUMP] - 1) * ((g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MAX] - g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MIN]) / (g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MAX_POINTS] - 1)) ) )
		
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ULTRA_POINTS_LONG_J", g_PlayerInfo[id][PLAYER_LONG_JUMP], g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MAX_POINTS], iTime)
		menu_additem(iMenu, szFormat,_,_, iCb);
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "LONG_JUMP_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}	
	
	if(g_UltraPointsInfo[ULTRA_POINTS_JUMPS]) {		
		new Float:iJumps = (g_PlayerInfo[id][PLAYER_JUMPS]*100.0/g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MAX_POINTS])
		new iWas, iValue
		for(new a = 1; a <= g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MULTIPLIER]; a++) {
			new Float:value = (((a*10)*0.1)/g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MULTIPLIER])*100.0
			if(floatround(iJumps) >= floatround(value)) {
				iValue = a
				iWas++
			}
			if(a == g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MULTIPLIER] && !iWas)
				iJumps = 0.0
		}
		
	        iJumps = float(iValue)
	        
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ULTRA_POINTS_JUMPS", g_PlayerInfo[id][PLAYER_JUMPS], g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MAX_POINTS], floatround(iJumps))
		menu_additem(iMenu, szFormat,_,_, iCb);
		
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "JUMPS_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
        if(g_UltraPointsInfo[ULTRA_POINTS_INVIS]) {
		new Float:fMultiplier = ((255 - g_UltraPointsInfo[ULTRA_POINTS_INVIS_MIN_LEVEL])/float(g_UltraPointsInfo[ULTRA_POINTS_INVIS_MAX_POINTS]))
		new Float:fInvis = (float(g_PlayerInfo[id][PLAYER_INVISIBLE])* fMultiplier) * 100.0 / 255

		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_ULTRA_POINTS_INVIS", g_PlayerInfo[id][PLAYER_INVISIBLE], g_UltraPointsInfo[ULTRA_POINTS_INVIS_MAX_POINTS], fInvis)
                if(g_UltraPointsInfo[ULTRA_POINTS_INVIS_ONLY_KNIFE])
                        add(szFormat, charsmax(szFormat), "\d [ONLY KNIFE]")
		menu_additem(iMenu, szFormat,_,_, iCb);

        } else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "INVIS_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	if(g_FastStats[1]) {
		new iNum
		if((g_PlayerInfo[id][PLAYER_FAST_STATS] + 1) >= g_FastStatsNum)
			iNum = g_FastStatsValue[0];
		else
			iNum = g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS] + 1];
		
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_POINTS_FAST_STATS", iNum )
		menu_additem(iMenu, szFormat)
	}
	
	menu_display(id, iMenu);
}

public menuUltraPointsCb(id, menu, item) {
	item++
	
	if(!g_PlayerInfo[id][PLAYER_ULTRA_POINTS]
	|| (g_FastStats[1] ?( g_PlayerInfo[id][PLAYER_ULTRA_POINTS] < g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]):!g_PlayerInfo[id][PLAYER_ULTRA_POINTS])
	|| (item == 1 && g_PlayerInfo[id][PLAYER_DAMAGE] >= g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MAX_POINTS])
	|| (item == 1 && !g_UltraPointsInfo[ULTRA_POINTS_DAMAGE])
	|| (item == 1 && g_FastStats[1] && (g_PlayerInfo[id][PLAYER_DAMAGE]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MAX_POINTS])
	|| (item == 2 && g_PlayerInfo[id][PLAYER_LONG_JUMP] >= g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MAX_POINTS])
	|| (item == 2 && !g_UltraPointsInfo[ULTRA_POINTS_LONG_JUMP])
	|| (item == 2 && g_FastStats[1] && (g_PlayerInfo[id][PLAYER_LONG_JUMP]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MAX_POINTS])
	|| (item == 3 && g_PlayerInfo[id][PLAYER_JUMPS] >= g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MAX_POINTS])
	|| (item == 3 && !g_UltraPointsInfo[ULTRA_POINTS_JUMPS])
	|| (item == 3 && g_FastStats[1] && (g_PlayerInfo[id][PLAYER_JUMPS]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MAX_POINTS])
	|| (item == 4 && g_PlayerInfo[id][PLAYER_INVISIBLE] >= g_UltraPointsInfo[ULTRA_POINTS_INVIS_MAX_POINTS])
	|| (item == 4 && !g_UltraPointsInfo[ULTRA_POINTS_INVIS])
	|| (item == 4 && g_FastStats[1] && (g_PlayerInfo[id][PLAYER_INVISIBLE]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_UltraPointsInfo[ULTRA_POINTS_INVIS_MAX_POINTS]))
		return ITEM_DISABLED
	
	return ITEM_ENABLED
}
public menuUltraPointsH(id, menu, item) {
	if(item == MENU_EXIT) {
		menu_destroy(menu);
		return;
	}
	
	item++;
	
	switch(item) {
		/* Obrazenia / Damage */
		case 1: g_PlayerInfo[id][PLAYER_DAMAGE] += g_FastStats[1] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Long Jump  */
		case 2: g_PlayerInfo[id][PLAYER_LONG_JUMP] += g_FastStats[1] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Skoki / Jumps */
		case 3: g_PlayerInfo[id][PLAYER_JUMPS] += g_FastStats[1] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Niewidzialnosc / Invisible */ 
		case 4: g_PlayerInfo[id][PLAYER_INVISIBLE] += g_FastStats[1] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Szybkie rozdawanie statystyk / Fast Stats */
		case 5: {
			g_PlayerInfo[id][PLAYER_FAST_STATS]++
			if(g_PlayerInfo[id][PLAYER_FAST_STATS] >= g_FastStatsNum)
				g_PlayerInfo[id][PLAYER_FAST_STATS] = 0
		}
		
	}
	if(item != 5)
		g_PlayerInfo[id][PLAYER_ULTRA_POINTS] -= g_FastStats[1] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1;
	
	menuUltraPoints(id);
}
public menuPoints(id) {
	new szFormat[70];
	
	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_POINTS_TITLE_1", g_PlayerInfo[id][PLAYER_POINTS])
	if(g_FastStats[0]) {
		new szTemp[33]
		formatex(szTemp, charsmax(szTemp), "%L", id, "MENU_POINTS_TITLE_2", g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]])
		add(szFormat, charsmax(szFormat), szTemp)
	}
	new iMenu = menu_create(szFormat, "menuPointsH")
	new iCb = menu_makecallback("menuPointsCb");
	
	if(g_PointsInfo[POINTS_HEALTH]) {
		new iHealth = (g_PointsInfo[POINTS_HEALTH_MULTIPLIER] * g_PlayerInfo[id][PLAYER_HEALTH])
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_POINTS_HEALTH", g_PlayerInfo[id][PLAYER_HEALTH], g_PointsInfo[POINTS_HEALTH_MAX_POINTS], iHealth)
		menu_additem(iMenu, szFormat, _, _, iCb);        
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "HEALTH_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	
	if(g_PointsInfo[POINTS_SPEED]) {
		new Float:fSpeed = (g_PlayerInfo[id][PLAYER_SPEED] * g_PointsInfo[POINTS_SPEED_MULTIPLIER]) * 100.0 / 250.0
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_POINTS_SPEED", g_PlayerInfo[id][PLAYER_SPEED], g_PointsInfo[POINTS_SPEED_MAX_POINTS], fSpeed)
		menu_additem(iMenu, szFormat,_,_, iCb);
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "SPEED_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	if(g_PointsInfo[POINTS_GRAVITY]) {
		new Float:fGravity = (g_PlayerInfo[id][PLAYER_GRAVITY] * g_PointsInfo[POINTS_GRAVITY_MULTIPLIER] ) * 100.0 / 800.0
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_POINTS_GRAVITY", g_PlayerInfo[id][PLAYER_GRAVITY], g_PointsInfo[POINTS_GRAVITY_MAX_POINTS], fGravity);
		menu_additem(iMenu, szFormat,_,_, iCb);
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "GRAVITY_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	if(g_PointsInfo[POINTS_MONEY]) {
		new iMoney = g_PlayerInfo[id][PLAYER_MONEY] * g_PointsInfo[POINTS_MONEY_MULTIPLIER]
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_POINTS_MONEY", g_PlayerInfo[id][PLAYER_MONEY], g_PointsInfo[POINTS_MONEY_MAX_POINTS], iMoney);
		menu_additem(iMenu, szFormat,_,_, iCb);
	} else {
		formatex(szFormat, charsmax(szFormat), "%L", id, "MONEY_OFF")
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	
	if(g_FastStats[0]) {
		new iNum
		if((g_PlayerInfo[id][PLAYER_FAST_STATS] + 1) >= g_FastStatsNum)
			iNum = g_FastStatsValue[0];
		else
			iNum = g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS] + 1];
		
		formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_POINTS_FAST_STATS", iNum )
		menu_additem(iMenu, szFormat)
	}
	
	menu_display(id, iMenu);
}

public menuPointsCb(id, menu, item) {
	item++
	
	if(!g_PlayerInfo[id][PLAYER_POINTS]
	|| (g_FastStats[0] ?( g_PlayerInfo[id][PLAYER_POINTS] < g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]):!g_PlayerInfo[id][PLAYER_POINTS])
	|| (item == 1 && g_PlayerInfo[id][PLAYER_HEALTH] >= g_PointsInfo[POINTS_HEALTH_MAX_POINTS])
	|| (item == 1 && !g_PointsInfo[POINTS_HEALTH]
	|| (item == 1 && g_FastStats[0] && (g_PlayerInfo[id][PLAYER_HEALTH]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_PointsInfo[POINTS_HEALTH_MAX_POINTS])
	|| (item == 2 && g_PlayerInfo[id][PLAYER_SPEED] >= g_PointsInfo[POINTS_SPEED_MAX_POINTS])
	|| (item == 2 && !g_PointsInfo[POINTS_SPEED])
	|| (item == 2 && g_FastStats[0] && (g_PlayerInfo[id][PLAYER_SPEED]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_PointsInfo[POINTS_SPEED_MAX_POINTS])
	|| (item == 3 && g_PlayerInfo[id][PLAYER_GRAVITY] >= g_PointsInfo[POINTS_GRAVITY_MAX_POINTS])
	|| (item == 3 && !g_PointsInfo[POINTS_GRAVITY])
	|| (item == 3 && g_FastStats[0] && (g_PlayerInfo[id][PLAYER_GRAVITY]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_PointsInfo[POINTS_GRAVITY_MAX_POINTS])
	|| (item == 4 && g_PlayerInfo[id][PLAYER_MONEY] >= g_PointsInfo[POINTS_MONEY_MAX_POINTS])
	|| (item == 4 && !g_PointsInfo[POINTS_MONEY])
	|| (item == 4 && g_FastStats[0] && (g_PlayerInfo[id][PLAYER_MONEY]+g_FastStatsValue[g_PlayerInfo[id][PLAYER_FAST_STATS]]) > g_PointsInfo[POINTS_MONEY_MAX_POINTS])))
	        return ITEM_DISABLED
	
	return ITEM_ENABLED
}
public menuPointsH(id, menu, item) {
	if(item == MENU_EXIT) {
		menu_destroy(menu);
		return;
	}
	
	item++;
	
	switch(item) {
		/* Zycie / Health */
		case 1: g_PlayerInfo[id][PLAYER_HEALTH] += g_FastStats[0] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Szybkosc / Speed */
		case 2: g_PlayerInfo[id][PLAYER_SPEED] += g_FastStats[0] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Grawitacja / Gravity */
		case 3: g_PlayerInfo[id][PLAYER_GRAVITY] += g_FastStats[0] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Kasa / Money */ 
		case 4: g_PlayerInfo[id][PLAYER_MONEY] += g_FastStats[0] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1
		/* Szybkie rozdawanie statystyk / Fast Stats */
		case 5: {
			g_PlayerInfo[id][PLAYER_FAST_STATS]++
			if(g_PlayerInfo[id][PLAYER_FAST_STATS] >= g_FastStatsNum)
				g_PlayerInfo[id][PLAYER_FAST_STATS] = 0
		}
		
	}
	if(item != 5)
		g_PlayerInfo[id][PLAYER_POINTS] -= g_FastStats[0] ? g_FastStatsValue[ g_PlayerInfo[id][PLAYER_FAST_STATS]]:1;
	
	menuPoints(id);
}

public cmdmenuShop(id) {
	if(!g_ShopStatus) {
		ColorChat(id, GREEN, "%s^x01 Sklep na tym serwerze jest wylaczony", gszPrefix)
		return;
	} else if(!g_ShopItemsNum) {
		ColorChat(id, GREEN, "%s^x01 Sklep nie posiada zadnych przedmiotow na sprzedaz", gszPrefix)
		return;
	}
		
	static szFormat[128]

	formatex(szFormat, charsmax(szFormat), "\wMasz \y%d\w monet",  g_PlayerInfo[id][PLAYER_COINS])
	
	new iMenu = menu_create(szFormat, "cmdmenuShopH")
	new iCb = menu_makecallback("cmdmenuShopCb")
	
	for(new i = 1; i <= g_ShopItemsNum; i++) {
		
		if(g_ShopPlayerBuy[id][i] )
			formatex(szFormat, charsmax(szFormat), "%s \r[KUPIONE]", g_ShopItemsName[i])
		else {
			if(!g_ShopItemsPrice[i])
				formatex(szFormat, charsmax(szFormat), "%s \r[\y FREE \r]", g_ShopItemsName[i])
			else
				formatex(szFormat, charsmax(szFormat), "%s \r[\y %d\w monet \r]", g_ShopItemsName[i], g_ShopItemsPrice[i])

			if(!is_user_alive(id) && g_ShopOnlyAlive[i]) {
				new szAlive[25];
				formatex(szAlive, charsmax(szAlive), " \r[ MUSISZ ZYC ]")
				add(szFormat, charsmax(szFormat), szAlive);
			}
		}

		if(g_ShopOnePerRound[i]) {
			new szOneRound[25];
			formatex(szOneRound, charsmax(szOneRound), " \r[ NA RUNDE ]")
			add(szFormat, charsmax(szFormat), szOneRound);
		}
		menu_additem(iMenu, szFormat, _, _, iCb)
	}
	menu_display(id, iMenu)
}

public cmdmenuShopCb(id, menu, item) {
	for(new i = 1; i <= g_ShopItemsNum;i++) {
		if((item == i-1 && g_PlayerInfo[id][PLAYER_COINS] < g_ShopItemsPrice[i]) || (item == i-1 && g_ShopPlayerBuy[id][i]))
			return ITEM_DISABLED
		if(item == i-1 && (g_ShopOnlyAlive[i] && !is_user_alive(id)))
			return ITEM_DISABLED;
	}
	return ITEM_ENABLED
}

public cmdmenuShopH(id, menu, item) {
	if(item++ == MENU_EXIT) {
		menu_destroy(menu)
		return PLUGIN_CONTINUE
	}

	if(g_ShopOnlyAlive[item] && !is_user_alive(id)) {
		cmdmenuShop(id)
		return PLUGIN_CONTINUE;
	}
	
	new szKey[5];
	static szBuyOption[16],
	szTitle[256],
	szNo[16];
	
	num_to_str(item, szKey, 4);
	
	formatex(szBuyOption, charsmax(szBuyOption), "\yKupuje", id);
	formatex(szNo, charsmax(szNo), "\rNie")
	
	formatex(szTitle, charsmax(szTitle), "\wNazwa: %s ^n\wOpis: %s ^n\wCena: %d monet^n\wRaz na runde: \y%s^nTylko zyjacy: \y%s^n\rKupujesz?",  
	g_ShopItemsName[item], 
	g_ShopItemsDesc[item],
	g_ShopItemsPrice[item], 
	g_ShopOnePerRound[item] ?  "\rTak" : "\yNie", 
	g_ShopOnlyAlive[item] ?  "\rTak" : "\yNie")	
	
	new iMenu = menu_create(szTitle, "cmdmenuShop2H")
	menu_additem(iMenu, szBuyOption, szKey)
	menu_additem(iMenu, szNo)	
	menu_display(id, iMenu)
	
	return PLUGIN_CONTINUE
}

public cmdmenuShop2H(id, menu, item) {
	if(item == MENU_EXIT || item == 1) {
		menu_destroy(menu)
		return PLUGIN_CONTINUE
	}
	if(item == 0) {
		new szItem[6], access, callback, iName[4];
		menu_item_getinfo(menu, item, access, szItem,5, iName, 4, callback);

		if(g_ShopOnlyAlive[str_to_num(szItem)] && !is_user_alive(id)) {
			ColorChat(id, GREEN, "%s^x01 Aby kupic ten przedmiot musisz zyc!", gszPrefix)
			cmdmenuShop(id)
			return PLUGIN_CONTINUE;
		}
		
		cmdBuyItem(id, str_to_num(szItem))
	}
	return PLUGIN_CONTINUE
}
public cmdBuyItem(id, iItemIndex) {
	new iRet
	g_ForwardItemSelectedPre = CreateOneForward(g_ShopPluginIndex[iItemIndex], "exp_shop_item_selected_pre", FP_CELL, FP_CELL);
	ExecuteForward(g_ForwardItemSelectedPre, iRet, id, iItemIndex);
	
	if(iRet)
		return iRet
	
	ColorChat(id, GREEN, "%s^x01 Kupiles: %s", gszPrefixShop, g_ShopItemsName[iItemIndex])
	ColorChat(id, GREEN, "%s^x01 Opis: %s", gszPrefixShop, g_ShopItemsDesc[iItemIndex])
	ColorChat(id, GREEN, "%s^x01 Za %d monet", gszPrefixShop, g_ShopItemsPrice[iItemIndex])
	
	if(g_ShopOnePerRound[iItemIndex])
		g_ShopPlayerBuy[id][iItemIndex] = 1;
	
	g_PlayerInfo[id][PLAYER_COINS] -= g_ShopItemsPrice[iItemIndex]

        g_ForwardItemSelectedPost = CreateOneForward(g_ShopPluginIndex[iItemIndex], "exp_shop_item_selected_post", FP_CELL, FP_CELL);
	ExecuteForward(g_ForwardItemSelectedPost, iRet, id, iItemIndex);
	
	if(iRet)
		return iRet
	return PLUGIN_CONTINUE
}

public menuReset(id) {
	new szFormat[64]
	
	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_RESET_TITLE")
	new iMenu = menu_create(szFormat, "menuResetH")
	new iCb = menu_makecallback("menuResetCb")

	formatex(szFormat, charsmax(szFormat), "%L", id, (!g_ResetPoints[0])?"POINTS_DISABLED":points_enabled()?"POINTS":"POINTS_DISABLED")
	menu_additem(iMenu, szFormat, _, _, iCb)
	
	formatex(szFormat, charsmax(szFormat), "%L", id, (!g_ResetUltraPoints[0])?"ULTRA_POINTS_DISABLED":ultra_points_enabled()?"ULTRA_POINTS":"ULTRA_POINTS_DISABLED")
	menu_additem(iMenu, szFormat, _, _, iCb)
	
	formatex(szFormat, charsmax(szFormat), "%L", id, (!g_ResetMegaPoints[0])?"MEGA_POINTS_DISABLED":mega_points_enabled()?"MEGA_POINTS":"MEGA_POINTS_ENABLED")
	menu_additem(iMenu, szFormat, _, _, iCb)
	
	menu_display(id, iMenu)
}

public menuResetCb(id, menu, item) {
	
	new szPoints[3]
	get_able_points(id, szPoints)

	if((item == 0 && !points_enabled()) 
	|| (item == 0 && !g_ResetPoints[0])
	|| (item == 0 && !szPoints[0])
	|| (item == 1 && !ultra_points_enabled())
	|| (item == 1 && !g_ResetUltraPoints[0])
	|| (item == 1 && !szPoints[1])
	|| (item == 2 && !mega_points_enabled())
	|| (item == 2 && !g_ResetMegaPoints[0])
	|| (item == 2 && !szPoints[2]))
		return ITEM_DISABLED
	
	return ITEM_ENABLED
}

public menuResetH(id, menu, item) {
	if(item++ == MENU_EXIT) {
		menu_destroy(menu)
		cmdmenuPlayer(id)
		return
	}
	new szFormat[90]
	new szOption[16];
	
	new iMenu
	switch(item) {
		case 1: {
			new iPrice = g_ResetPoints[1]
			formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_RESET_POINTS_1")
			if(iPrice)  {
				new szTemp[64]
				formatex(szTemp, charsmax(szTemp), "%L", id, "MENU_RESET_POINTS_2", iPrice)
				add(szFormat, charsmax(szFormat), szTemp)
			}
		}
		case 2: {
			new iPrice = g_ResetUltraPoints[1]
			formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_RESET_ULTRA_POINTS_1")
			if(iPrice)  {
				new szTemp[64]
				formatex(szTemp, charsmax(szTemp), "%L", id, "MENU_RESET_ULTRA_POINTS_2", iPrice)
				add(szFormat, charsmax(szFormat), szTemp)
			}
		}
		case 3: {
			new iPrice = g_ResetMegaPoints[1]
			formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_RESET_MEGA_POINTS_1")
			if(iPrice)  {
				new szTemp[64]
				formatex(szTemp, charsmax(szTemp), "%L", id, "MENU_RESET_MEGA_POINTS_2", iPrice)
				add(szFormat, charsmax(szFormat), szTemp)
			}
			
		}
	}
	iMenu = menu_create(szFormat, "menuResetH2")
	new iCb = menu_makecallback("menuResetCb2")
	
	new szData[2]
	num_to_str(item, szData, charsmax(szData))
	
	formatex(szFormat, charsmax(szFormat), "%L ", id, "MENU_RESET_CONFIRM_1")
	switch(item) {
		case 1: formatex(szOption, charsmax(szOption), "%L", id, "POINTS")
		case 2: formatex(szOption, charsmax(szOption), "%L", id, "ULTRA_POINTS")
		case 3: formatex(szOption, charsmax(szOption), "%L", id, "MEGA_POINTS")
	}
	add(szFormat, charsmax(szFormat), szOption);
	menu_additem(iMenu, szFormat, szData, _, iCb)
	
	formatex(szFormat, charsmax(szFormat), "%L", id, "MENU_RESET_CONFIRM_2")
	menu_additem(iMenu, szFormat, _, _, iCb)
	
	menu_display(id, iMenu)
}

public menuResetCb2(id, menu, item) {
	if(item == 0) {
		new acces, szData[2], cb
		menu_item_getinfo(menu, item, acces, szData, charsmax(szData), _, _, cb)
		
		new iItem = str_to_num(szData)
		new iExp = g_PlayerInfo[id][PLAYER_EXP]

		/* od 1 do 3 poniewaz w menuResetH jest item++ */
		if((iItem == 1 && iExp < g_ResetPoints[1])
		|| (iItem == 2 && iExp < g_ResetUltraPoints[1])
		|| (iItem == 3 && iExp < g_ResetMegaPoints[1]))
			return ITEM_DISABLED
	}
	return ITEM_ENABLED
}
public menuResetH2(id, menu, item) {
	if(item++ == MENU_EXIT)  {
		menu_destroy(menu)
		menuReset(id)
		return
	}
	else if(item == 2) {
		menu_destroy(menu)
		menuReset(id)
		return
	}
	
	new acces, szData[2], cb
	menu_item_getinfo(menu, 0, acces, szData, charsmax(szData), _, _, cb)
	new iItem = str_to_num(szData)
	
	ResetPlayerSkills(id, (iItem == 1? 1: 0 ), (iItem == 2 ? 1 : 0), (iItem == 3 ? 1 : 0))
	
	new iPrice = (iItem==1?g_ResetPoints[1]:iItem==2?g_ResetUltraPoints[1]:iItem==3?g_ResetMegaPoints[1]:-31231231)
	
	new szFormat[64]

	switch(iItem) {
		case 1: formatex(szFormat, charsmax(szFormat), "%L", id, "MSG_RESET_1", g_PlayerInfo[id][PLAYER_POINTS])
		case 2: formatex(szFormat, charsmax(szFormat), "%L", id, "MSG_RESET_2", g_PlayerInfo[id][PLAYER_ULTRA_POINTS])
		case 3: formatex(szFormat, charsmax(szFormat), "%L", id, "MSG_RESET_3", g_PlayerInfo[id][PLAYER_MEGA_POINTS])
	}
	
	if(iPrice) {
		new szTemp[33]
		formatex(szTemp, charsmax(szTemp), " %L", id, "MSG_RESET_PRICE", iPrice)
		add(szFormat, charsmax(szFormat), szTemp)
	}
	g_PlayerInfo[id][PLAYER_EXP] -= iPrice
	g_PlayerInfo[id][PLAYER_EXP] = g_PlayerInfo[id][PLAYER_EXP] < 0 ? 0 : g_PlayerInfo[id][PLAYER_EXP]
	ColorChat(id, GREEN, "%s^x01 %s", gszPrefix, szFormat)
	
	cmdmenuPlayer(id)
}

public ResetPlayerInformation(id) {
	/* Resetowanie informacji graczowi */
	/* Reseting infomations about player */
	
	for(new i; i < _:e_PlayerInfo ; i++)
		g_PlayerInfo[id][e_PlayerInfo:i] = 0
	
	formatex(g_PlayerInfo[id][PLAYER_NICK], 32, "");
}

stock ResetPlayerSkills(id, Points = 0, uPoints = 0, mPoints = 0) {
	if(!is_user_connected(id))
		return
	
	if(!Points && !uPoints && !mPoints)
		return
	
	if(Points && points_enabled()) {
		g_PlayerInfo[id][PLAYER_POINTS] = floatround(float(((g_PlayerInfo[id][PLAYER_LEVEL] * g_PointsInfo[POINTS_MULTIPLIER]) / g_PointsInfo[POINTS_LEVEL_RATIO] )), floatround_floor);
		g_PlayerInfo[id][PLAYER_HEALTH] = 0
		g_PlayerInfo[id][PLAYER_SPEED] = 0
		g_PlayerInfo[id][PLAYER_GRAVITY] = 0
		g_PlayerInfo[id][PLAYER_MONEY] = 0
	}
	if(uPoints && ultra_points_enabled()) {
		g_PlayerInfo[id][PLAYER_ULTRA_POINTS] = floatround(float(((g_PlayerInfo[id][PLAYER_LEVEL] * g_UltraPointsInfo[ULTRA_POINTS_MULTIPLIER]) / g_UltraPointsInfo[ULTRA_POINTS_LEVEL_RATIO] ) ), floatround_floor);
		g_PlayerInfo[id][PLAYER_DAMAGE] = 0
		g_PlayerInfo[id][PLAYER_INVISIBLE] = 0
		g_PlayerInfo[id][PLAYER_JUMPS] = 0
		g_PlayerInfo[id][PLAYER_LONG_JUMP] = 0
		
	}
	if(mPoints && mega_points_enabled()) {
		g_PlayerInfo[id][PLAYER_MEGA_POINTS] = floatround(float(((g_PlayerInfo[id][PLAYER_LEVEL] * g_MegaPointsInfo[MEGA_POINTS_MULTIPLIER]) / g_MegaPointsInfo[MEGA_POINTS_LEVEL_RATIO] ) ), floatround_floor);
		g_PlayerInfo[id][PLAYER_LIGHTING] = 0
		g_PlayerInfo[id][PLAYER_CRITICAL] = 0
		g_PlayerInfo[id][PLAYER_RESPAWN] = 0
		g_PlayerInfo[id][PLAYER_STRENGHT] = 0
	}
}

public checkLevel(id) {
	if(!is_user_connected(id))
		return
	
	/* Sprawdzanie poziomu */
	if(g_PlayerInfo[id][PLAYER_LEVEL] >= get_max_level())
		return
	
	new iLevel = g_PlayerInfo[id][PLAYER_LEVEL];
	new iPoints = g_PlayerInfo[id][PLAYER_POINTS];
	new iCoins = g_PlayerInfo[id][PLAYER_COINS];
	new iUltraPoints = g_PlayerInfo[id][PLAYER_ULTRA_POINTS];
	new iMegaPoints = g_PlayerInfo[id][PLAYER_MEGA_POINTS];
	
	while(g_PlayerInfo[id][PLAYER_EXP] >= get_level_exp(g_PlayerInfo[id][PLAYER_LEVEL])) {
		/* Ustawianie bonusow */	
		if(g_PlayerInfo[id][PLAYER_LEVEL] >= get_max_level())
			break;
                
		g_PlayerInfo[id][PLAYER_COINS] += g_CvarValue[CVAR_NEXT_LEVEL_COIN] + (is_user_vip(id)?g_VipBonus[2]:0)
		
		new iLevel_temp = ++g_PlayerInfo[id][PLAYER_LEVEL];

		if(g_CvarValue[CVAR_CHAT_LEVEL_RATIO] && (iLevel_temp % (get_max_level()/ g_CvarValue[CVAR_CHAT_LEVEL_RATIO] )) == 0)
		        ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_PLAYER_LEVEL", g_PlayerInfo[id][PLAYER_NICK], iLevel_temp)
	        
		/* Punkty */
		if(((iLevel_temp % g_PointsInfo[POINTS_LEVEL_RATIO]) == 0) && g_PointsInfo[POINTS])
			g_PlayerInfo[id][PLAYER_POINTS] += g_PointsInfo[POINTS_MULTIPLIER]
		
		
		/* Ultra Punkty */
		if(((iLevel_temp % g_UltraPointsInfo[ULTRA_POINTS_LEVEL_RATIO]) == 0) && g_UltraPointsInfo[ULTRA_POINTS])
			g_PlayerInfo[id][PLAYER_ULTRA_POINTS] += g_UltraPointsInfo[ULTRA_POINTS_MULTIPLIER]		
		
		if(((iLevel_temp % g_MegaPointsInfo[MEGA_POINTS_LEVEL_RATIO]) == 0) && g_MegaPointsInfo[MEGA_POINTS])
			g_PlayerInfo[id][PLAYER_MEGA_POINTS] += g_MegaPointsInfo[MEGA_POINTS_MULTIPLIER]
	}
        
	if(iLevel != g_PlayerInfo[id][PLAYER_LEVEL]) {
		ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_PLAYER_LEVELUP_1", g_PlayerInfo[id][PLAYER_LEVEL]);
		if(iPoints != g_PlayerInfo[id][PLAYER_POINTS])
			ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_PLAYER_LEVELUP_POINTS", (g_PlayerInfo[id][PLAYER_POINTS]-iPoints) );	
		if(iUltraPoints != g_PlayerInfo[id][PLAYER_ULTRA_POINTS])
			ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_PLAYER_LEVELUP_ULTRA_POINTS", (g_PlayerInfo[id][PLAYER_ULTRA_POINTS]-iUltraPoints)) ;
		if(iMegaPoints != g_PlayerInfo[id][PLAYER_MEGA_POINTS])
			ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_PLAYER_LEVELUP_MEGA_POINTS", (g_PlayerInfo[id][PLAYER_MEGA_POINTS]-iMegaPoints))	
		if(g_CvarValue[CVAR_NEXT_LEVEL_COIN])
			ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_PLAYER_LEVELUP_3", (g_PlayerInfo[id][PLAYER_COINS] - iCoins))
		ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_PLAYER_LEVELUP_2", ( get_level_exp(get_user_level(id)) - get_user_exp(id)), floatround(( get_level_exp(get_user_level(id)) - get_user_exp(id)) / (g_CvarValue[CVAR_KILL] * 1.2 ), floatround_ceil));
	}
	saveData(id)
}


public PlayerSpawn(id) {
	if(!is_user_alive(id))
		return HAM_IGNORED
	
	if(g_PointsInfo[POINTS_HEALTH]) {
		if(g_PlayerInfo[id][PLAYER_HEALTH] || (is_user_vip(id) && g_VipBonus[0])) {
			new iHealth = (g_PointsInfo[POINTS_HEALTH_MULTIPLIER] * g_PlayerInfo[id][PLAYER_HEALTH])
			set_user_health(id, ((get_user_health(id) + iHealth)+(is_user_vip(id)?g_VipBonus[0]:0)))
			
			if(get_user_health(id) == 256)
				set_user_health(id, 257)
		}
	}
	if(g_PointsInfo[POINTS_GRAVITY]) {
		if(g_PlayerInfo[id][PLAYER_GRAVITY]) {
			new Float:fGravity = (g_PlayerInfo[id][PLAYER_GRAVITY] * g_PointsInfo[POINTS_GRAVITY_MULTIPLIER] )
			set_user_gravity(id,    ((800-fGravity)/800))
		}
	}
	if(g_PointsInfo[POINTS_MONEY]) {
		if(g_PlayerInfo[id][PLAYER_MONEY]) {
			new iMoney = ( g_PlayerInfo[id][PLAYER_MONEY] * g_PointsInfo[POINTS_MONEY_MULTIPLIER] )
			cs_set_user_money(id, (cs_get_user_money(id)+iMoney)>16000?16000:(cs_get_user_money(id)+iMoney))
		}
	}
	if(g_UltraPointsInfo[ULTRA_POINTS_INVIS]) {
	        if(g_PlayerInfo[id][PLAYER_INVISIBLE] && !g_UltraPointsInfo[ULTRA_POINTS_INVIS_ONLY_KNIFE]) {
	                new Float:fMultiplier = ((255 - g_UltraPointsInfo[ULTRA_POINTS_INVIS_MIN_LEVEL])/float(g_UltraPointsInfo[ULTRA_POINTS_INVIS_MAX_POINTS]))
		        new iInvis = floatround(255 - (g_PlayerInfo[id][PLAYER_INVISIBLE]*fMultiplier) )
                        set_user_invisible(id, iInvis)
                }
        }
	if(has_points(id) || has_ultra_points(id) || has_mega_points(id) && g_CvarValue[CVAR_CHAT_RESPAWN_MSG]) {
		ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_RESPAWN_1")
		cmdmenuPlayer(id)
	}
	if(get_playersnum() < g_MinPlayers )
	        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_RESPAWN_2", g_MinPlayers)
	if(!task_exists(id+g_Task[TASK_HUD]))
		set_task(g_RefreshHudTime, "showPlayerHud", id + g_Task[TASK_HUD])
	
	return HAM_IGNORED
}
public HostageRescue() {
        if(get_playersnum() < g_MinPlayers)
                return
                
	new id = get_loguser_index()

        if(g_CvarValue[CVAR_HOSTAGE_RESCUE]) {
                new iExp = g_CvarValue[CVAR_HOSTAGE_RESCUE]
                iExp += is_user_vip(id)?(floatround(float(iExp)*g_VipExpMultiplier)):0
                g_PlayerInfo[id][PLAYER_EXP] += iExp
                checkLevel(id)
                ColorChat(0,GREEN, "%s^xo1 %L", gszPrefix, id, "MSG_HOSTAGE_RESCUE_1", iExp)
        } if(g_CvarValue[CVAR_HOSTAGE_RESCUE_COIN]) {
                new iCoin = g_CvarValue[CVAR_HOSTAGE_RESCUE_COIN]
                iCoin += (is_user_vip(id)?g_VipBonus[2]:0)
                g_PlayerInfo[id][PLAYER_COINS] += iCoin
                ColorChat(0,GREEN, "%s^x01 %L", gszPrefix, id, "MSG_HOSTAGE_RESCUE_2", iCoin)
        }
}

public client_PostThink(id) {
        if(!is_user_alive(id))
                return
        if(g_UltraPointsInfo[ULTRA_POINTS_INVIS_ONLY_KNIFE] && get_user_weapon(id) != CSW_KNIFE)
		set_user_invisible(id, 255)
}

public event_CurWeapon(id) {
	if(g_isFreezeTime || !is_user_connected(id) || !is_user_alive(id))
		return
		
	new iWeapon = read_data(2);

	if(g_UltraPointsInfo[ULTRA_POINTS_INVIS_ONLY_KNIFE] && iWeapon == CSW_KNIFE) 
		set_user_invisible(id, floatround(255 - (g_PlayerInfo[id][PLAYER_INVISIBLE]*((255 - g_UltraPointsInfo[ULTRA_POINTS_INVIS_MIN_LEVEL])/float(g_UltraPointsInfo[ULTRA_POINTS_INVIS_MAX_POINTS]))) ))
}

public SetSpeed(id) {
	if(!is_user_alive(id) || g_isFreezeTime || (!g_PlayerInfo[id][PLAYER_SPEED] && !is_user_vip(id)))
		return HAM_IGNORED
	
	new Float:fSpeed = (g_PlayerInfo[id][PLAYER_SPEED] * g_PointsInfo[POINTS_SPEED_MULTIPLIER])
	
	set_user_maxspeed(id, ((250.0 + fSpeed)+(is_user_vip(id)?float(g_VipBonus[1]):0.0)))
	
	return HAM_IGNORED
}

public PlayerKilled(iVictim) {
        if(!is_user_alive(iVictim) && is_user_connected(iVictim)) {
	        if(g_PlayerInfo[iVictim][PLAYER_RESPAWN] && g_MegaPointsInfo[MEGA_POINTS_RESPAWN]) {
	                new iChance = g_PlayerInfo[iVictim][PLAYER_RESPAWN] == 1 ? g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MAX] : (g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MAX] - ( (g_PlayerInfo[iVictim][PLAYER_RESPAWN] - 1) * ((g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MAX] - g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MIN]) / (g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MAX_POINTS] - 1)) ) )
                        if(random_num(1, iChance) == 1) {
                               ExecuteHamB(Ham_CS_RoundRespawn, iVictim)
                        }
                }
        }
}
public TakeDamage(this, idinflictor, attacker, Float:damage, damagebits) {
	if(!is_user_connected(attacker) || !is_user_connected(this))
		return HAM_IGNORED
	
	if(g_PlayerInfo[attacker][PLAYER_DAMAGE]) {
		new Float:iDamage = (g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MULTIPLIER] * g_PlayerInfo[attacker][PLAYER_DAMAGE])
		damage += iDamage
	}
	if(g_PlayerInfo[attacker][PLAYER_CRITICAL]) {
	        new iChance = g_PlayerInfo[attacker][PLAYER_CRITICAL]== 1? g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MAX] : (g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MAX] - ( (g_PlayerInfo[attacker][PLAYER_CRITICAL] - 1) * ((g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MAX] - g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MIN]) / (g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MAX_POINTS] - 1)) ) )
                new Float:fMultiplier = (g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MULTIPLIER] * g_PlayerInfo[attacker][PLAYER_CRITICAL] )
                if(random_num(1, iChance) == 1) {
                        damage = damage + (damage * fMultiplier)
                }
        }
	if(g_PlayerInfo[this][PLAYER_STRENGHT]) {
	        new Float:fStrenght = (g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MULTIPLIER] * g_PlayerInfo[this][PLAYER_STRENGHT])
                damage -= (damage * (fStrenght * 0.01))
        }
	SetHamParamFloat(4, damage)
	return HAM_IGNORED;
}

public CmdStart(id, uc_handle) {
	if(!is_user_alive(id) || !is_user_connected(id))
		return FMRES_IGNORED;
	
	if(!g_PlayerInfo[id][PLAYER_LONG_JUMP] && !g_PlayerInfo[id][PLAYER_JUMPS])
		return FMRES_IGNORED
		
	new iButton = get_uc(uc_handle, UC_Buttons);
	new iOldButton = get_user_oldbutton(id);
	new flags = get_entity_flags(id);
	
	// Skoki / Jumps
	
	if(g_PlayerInfo[id][PLAYER_JUMPS]) {
		static Float:iJumps[33] 
		
		if((iButton & IN_JUMP) && !(flags & FL_ONGROUND) && !(iOldButton & IN_JUMP) && floatround(iJumps[id]) > 0) {
			iJumps[id]-=1.0
			if(g_CvarValue[CVAR_CHAT_CENTER_MSG] && floatround(iJumps[id]) > 0)
				client_print(id, print_center, "%L", id, "MSG_USE_SKILL_JUMPS", floatround(iJumps[id]))
			
			new Float:fVelocity[3];
			entity_get_vector(id, EV_VEC_velocity, fVelocity);
			fVelocity[2] = random_float(265.0,285.0);
			entity_set_vector(id,EV_VEC_velocity,fVelocity);
		}
		else if(flags & FL_ONGROUND) {	
			iJumps[id] = (g_PlayerInfo[id][PLAYER_JUMPS]*100.0/g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MAX_POINTS])
                        new iWas, iValue
			for(new a = 1; a <= g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MULTIPLIER]; a++) {
				new Float:value = (((a*10)*0.1)/g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MULTIPLIER])*100.0
				if(floatround(iJumps[id]) >= floatround(value)) {
					iWas++
					iValue = a
				}
				if(a == g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MULTIPLIER] && !iWas) {
				        iJumps[id] = 0.0
				}
			}
			iJumps[id] = float(iValue)

		}
	}
	
	//Long Jump
	
	if(g_PlayerInfo[id][PLAYER_LONG_JUMP]) {
		new Float:iTime = g_PlayerInfo[id][PLAYER_LONG_JUMP]==0?0.0:g_PlayerInfo[id][PLAYER_LONG_JUMP]==1?g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MAX]:(g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MAX] - ( (g_PlayerInfo[id][PLAYER_LONG_JUMP]-1)*((g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MAX]-g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MIN]) / (g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MAX_POINTS]-1)) ) )

                if(g_CvarValue[CVAR_CHAT_CENTER_MSG] && get_gametime() < (g_PlayerInfo[id][PLAYER_LONG_JUMP_TIME] +iTime) && (iButton & IN_JUMP) && (iButton & IN_DUCK)) {
                        client_print(id, print_center, "%L", id, "MSG_USE_SKILL_LONG_JUMP_1", ((((g_PlayerInfo[id][PLAYER_LONG_JUMP_TIME] +iTime)*10)*0.1) - get_gametime()))
                        return FMRES_IGNORED
                }
		if((iButton & IN_JUMP) && (iButton & IN_DUCK) && (get_gametime() > (g_PlayerInfo[id][PLAYER_LONG_JUMP_TIME] + iTime)) && !g_isFreezeTime) {
			g_PlayerInfo[id][PLAYER_LONG_JUMP_TIME] = get_gametime()

			client_print(id, print_center, "%L", id, "MSG_USE_SKILL_LONG_JUMP_2", iTime)

			new Float: fVelocity[3]

			VelocityByAim(id, 650, fVelocity); //650 to predkosc wyrzucania oraz odleglosc
			fVelocity[2] = (167.5+ (g_PlayerInfo[id][PLAYER_LONG_JUMP] *10 )) // 10 to mnoznik wysokosci
			entity_set_vector(id, EV_VEC_velocity, fVelocity);
		}
	}
	return FMRES_IGNORED;
}

public event_DeathMsg() {
	/* Zabicie gracza */
	if(get_playersnum() < g_MinPlayers)
	        return
	        
	new iAttacker = read_data(1)
	new iVictim = read_data(2)
	new iHs = read_data(3)
	new iWeapon = read_data(4);
	
	if(iAttacker != iVictim && ( get_user_team(iAttacker) != get_user_team(iVictim) )) {
		new iExp = (iHs ? g_CvarValue[CVAR_KILL_HS] : g_CvarValue[CVAR_KILL])
                iExp += is_user_vip(iAttacker)?(floatround(float(iExp)*g_VipExpMultiplier)):0
		if(iWeapon == CSW_KNIFE)
			iExp += g_CvarValue[CVAR_KILL_KNIFE];
                
		g_PlayerInfo[iAttacker][PLAYER_EXP] += iExp

		if(g_CvarValue[CVAR_SHOW_HUD_KILL_EXP])  {
		        set_hudmessage(0, 127, 240, -1.0, -1.0,_,_,0.4, _, 0.1, 2)
		        show_hudmessage(iAttacker, "+%d %s", iExp, iHs ? "[HS]" : "")		
                }
		if(g_CvarValue[CVAR_KILL_COIN] || g_CvarValue[CVAR_KILL_HS_COIN] || (g_CvarValue[CVAR_KILL_KNIFE_COIN] && iWeapon == CSW_KNIFE)) {
		        new iCoins = (iHs ? g_CvarValue[CVAR_KILL_HS_COIN] : g_CvarValue[CVAR_KILL_COIN]) + (is_user_vip(iAttacker)?g_VipBonus[2]:0)
			if(iWeapon == CSW_KNIFE)
				iCoins += g_CvarValue[CVAR_KILL_KNIFE_COIN]
				
                        g_PlayerInfo[iAttacker][PLAYER_COINS] += iCoins
                        
                        if(g_CvarValue[CVAR_CHAT_KILL_COIN_MSG]) {
                                ColorChat(iAttacker, GREEN, "%s^x01 %L", gszPrefix, iAttacker, "MSG_KILL_COIN", iCoins)
                        }
                }
		checkLevel(iAttacker)
	}
}

public showPlayerHud(id) {
	/* Wyswietlanie informacji na ekranie */
	
	new iTask = id
	id-=g_Task[TASK_HUD]
	
	if(is_user_alive(id)) {
                set_hudmessage(62, 63, 142, 0.0, 0.18, 0, 0.1, g_RefreshHudTime+0.1)
		show_hudmessage(id, "%L: %d / %d^nEXP: %d / %d (+ %d)^n%L: %d", id, "LEVEL", get_user_level(id),  get_max_level(),  get_user_level(id)>=get_max_level()?get_level_exp(get_user_level(id)):get_user_exp(id), get_level_exp(get_user_level(id)),(get_user_level(id)==get_max_level()?0:( get_level_exp(get_user_level(id)) - get_user_exp(id))), id, "COINS", g_PlayerInfo[id][PLAYER_COINS])		
		
		if(get_user_health(id) > 255 && g_CvarValue[CVAR_SHOW_HEALTH]) {
			set_hudmessage(g_ShowHealthColor[0], g_ShowHealthColor[1], g_ShowHealthColor[2], g_ShowHealthPosition[0], g_ShowHealthPosition[1], 0, 6.0, g_RefreshHudTime+0.1)
			show_hudmessage(id, "[%L: %d]", id, "HEALTH", get_user_health(id))
		}
	}
	else {
		new target = pev(id, pev_iuser2)
		
		if(is_user_alive(target)) {
			set_hudmessage(228, 155, 28, 0.51, 0.61, 0, 0.1, g_RefreshHudTime+0.1)
			show_hudmessage(id, "%L: %d / %d^nEXP: %d / %d (+ %d)^nHP: %d", id, "LEVEL", get_user_level(target), get_max_level(), get_user_level(target)>=get_max_level()?get_level_exp(get_user_level(target)):get_user_exp(target), get_level_exp(get_user_level(target)), get_user_level(target)==get_max_level()?0:( get_level_exp(get_user_level(target)) - get_user_exp(target) ) , get_user_health(target))
		}
	}
	
	set_task(g_RefreshHudTime, "showPlayerHud", iTask)
}

/* Podlozenie bomby */		
public bomb_planted(id) {
	if(get_playersnum() >= g_MinPlayers && is_user_alive(id)) {
		new iExp = g_CvarValue[CVAR_PLANT_BOMB] + (is_user_vip(id)  ? (floatround(float(iExp) * g_VipExpMultiplier)) : 0)

		if(iExp) {
			g_PlayerInfo[id][PLAYER_EXP] += iExp
			if(g_CvarValue[CVAR_CHAT_PLANT_B_EXP_MSG]) 
			        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_BOMB_PLANTED_1", iExp)
			
			checkLevel(id)
		}
		new iCoins =  g_CvarValue[CVAR_PLANT_BOMB_COIN] + (is_user_vip(id)?g_VipBonus[2]:0);
		
		if(iCoins) {
		        if(g_CvarValue[CVAR_CHAT_PLANT_B_COIN_MSG]) 
			        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_BOMB_PLANTED_2", iCoins)
                        
			g_PlayerInfo[id][PLAYER_COINS] += iCoins
	        }
	}
}

/* Rozbrojenie bomby */
public bomb_defused(id) {
	if(get_playersnum() >= g_MinPlayers && is_user_alive(id)) {
		new iExp = g_CvarValue[CVAR_DEFUSE_BOMB] + (is_user_vip(id)  ? (floatround(float(iExp) * g_VipExpMultiplier)) : 0)

		if(iExp) {
			g_PlayerInfo[id][PLAYER_EXP] += iExp
			if(g_CvarValue[CVAR_CHAT_DEFUSE_B_EXP_MSG]) 
			        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_BOMB_DEFUSED_1", iExp)
                        
			checkLevel(id)
		}
		new iCoins =  g_CvarValue[CVAR_DEFUSE_BOMB_COIN] + (is_user_vip(id)?g_VipBonus[2]:0);
		
		if(iCoins) {
		        if(g_CvarValue[CVAR_CHAT_DEFUSE_B_COIN_MSG]) 
			        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_BOMB_DEFUSED_2", iCoins)
                        
			g_PlayerInfo[id][PLAYER_COINS] += iCoins
	        }
	}
}

public cmdMenuAddExp(id) {
	new szExp[10]
	read_args(szExp, 9)
	remove_quotes(szExp)

	new target = g_PlayerInfo[id][PLAYER_TARGET]
	new iExp = str_to_num(szExp)
	
	if(g_PlayerInfo[target][PLAYER_EXP]+iExp > get_level_exp(get_max_level())) {
		ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_1")
		return 
	}
	else if(iExp <= 0) {      
	        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_2")
		return
	}
		
	g_PlayerInfo[target][PLAYER_EXP] += iExp
	
	ResetPlayerSkills(target, 1, 1, 1)
	checkLevel(target)

	if(!g_CvarValue[CVAR_CHAT_ADMIN_QUITE])
		ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ADD_EXP", g_PlayerInfo[id][PLAYER_NICK], iExp, g_PlayerInfo[target][PLAYER_NICK])
	
}
public cmdMenuAddLevel(id) {
	new szLvl[10]
	read_args(szLvl, 9)
	remove_quotes(szLvl)

	new target = g_PlayerInfo[id][PLAYER_TARGET]
	new iLevel = str_to_num(szLvl)
	
	if(g_PlayerInfo[target][PLAYER_LEVEL]+iLevel > get_max_level()) {
		ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_1")
		return 
	}
	else if(iLevel <= 0) {      
	        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_2")
		return
	}
		
	g_PlayerInfo[target][PLAYER_LEVEL] += iLevel
	g_PlayerInfo[target][PLAYER_EXP] = get_level_exp(g_PlayerInfo[target][PLAYER_LEVEL]-1)
	ResetPlayerSkills(target, 1, 1, 1)

	if(!g_CvarValue[CVAR_CHAT_ADMIN_QUITE])
		ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ADD_LEVEL", g_PlayerInfo[id][PLAYER_NICK], iLevel, g_PlayerInfo[target][PLAYER_NICK])
	
}
public cmdMenuAddCoins(id) {
	new szCoins[10]
	read_args(szCoins, 9)
	remove_quotes(szCoins)

	new target = g_PlayerInfo[id][PLAYER_TARGET]
	new iCoins = str_to_num(szCoins)
	
	if(iCoins <= 0) {      
	        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_2")
		return
	}
		
	g_PlayerInfo[target][PLAYER_COINS] += iCoins

	if(!g_CvarValue[CVAR_CHAT_ADMIN_QUITE])
		ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ADD_COINS", g_PlayerInfo[id][PLAYER_NICK], iCoins, g_PlayerInfo[target][PLAYER_NICK])
	
}
public cmdMenuSetExp(id) {
	new szExp[10]
	read_args(szExp, 9)
	remove_quotes(szExp)

	new target = g_PlayerInfo[id][PLAYER_TARGET]
	new iExp = str_to_num(szExp)
	
	if(iExp > get_level_exp(get_max_level())) {
		ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_1")
		return 
	}
	else if(iExp <= 0) {      
	        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_2")
		return
	}
		
	g_PlayerInfo[target][PLAYER_EXP] = iExp
	
	ResetPlayerSkills(target, 1, 1, 1)
	checkLevel(target)

	if(!g_CvarValue[CVAR_CHAT_ADMIN_QUITE])
		ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_SET_EXP", g_PlayerInfo[id][PLAYER_NICK], iExp, g_PlayerInfo[target][PLAYER_NICK])
	
}
public cmdMenuSetLevel(id) {
	new szLvl[10]
	read_args(szLvl, 9)
	remove_quotes(szLvl)

	new target = g_PlayerInfo[id][PLAYER_TARGET]
	new iLevel = str_to_num(szLvl)
	
	if(iLevel > get_max_level()) {
		ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_1")
		return 
	}
	else if(iLevel <= 0) {      
	        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_2")
		return
	}
		
	g_PlayerInfo[target][PLAYER_LEVEL] = iLevel
	g_PlayerInfo[target][PLAYER_EXP] = get_level_exp((g_PlayerInfo[target][PLAYER_LEVEL]-1) ? g_PlayerInfo[target][PLAYER_LEVEL]-1 : 0);
	
	ResetPlayerSkills(target, 1, 1, 1)

	if(!g_CvarValue[CVAR_CHAT_ADMIN_QUITE])
		ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_SET_LEVEL", g_PlayerInfo[id][PLAYER_NICK], iLevel, g_PlayerInfo[target][PLAYER_NICK])
	
}
public cmdMenuSetCoins(id) {
	new szCoins[10]
	read_args(szCoins, 9)
	remove_quotes(szCoins)

	new target = g_PlayerInfo[id][PLAYER_TARGET]
	new iCoins = str_to_num(szCoins)
	
	if(iCoins <= 0) {      
	        ColorChat(id, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_ERROR_2")
		return
	}

	g_PlayerInfo[target][PLAYER_COINS] = iCoins

	if(!g_CvarValue[CVAR_CHAT_ADMIN_QUITE])
		ColorChat(0, GREEN, "%s^x01 %L", gszPrefix, id, "MSG_ADMIN_SET_COINS", g_PlayerInfo[id][PLAYER_NICK], iCoins, g_PlayerInfo[target][PLAYER_NICK])
	
}

public saveData(id)
{
	
	if((!g_nVaultFile_SaveBots && is_user_bot(id)) ||g_nVaultFile_Mode == 0 || get_user_level(id) < g_nVaultFile_MinLevelSave)
		return;

	if(get_playersnum() < g_MinPlayers)
		return;
		
	new szFormat[128]
	new szKey[33];

	if(g_nVaultFile_Mode == 1) 
		formatex(szKey, charsmax(szKey), g_PlayerInfo[id][PLAYER_NICK]);
	else if(g_nVaultFile_Mode == 2) 
		get_user_ip(id, szKey, charsmax(szKey), 1);
	else if(g_nVaultFile_Mode == 3) 
		get_user_authid(id, szKey, charsmax(szKey));
	
	trim(szKey)
	formatex(szFormat, charsmax(szFormat), "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %", 
	g_PlayerInfo[id][PLAYER_LEVEL], g_PlayerInfo[id][PLAYER_EXP], g_PlayerInfo[id][PLAYER_COINS], g_PlayerInfo[id][PLAYER_POINTS], g_PlayerInfo[id][PLAYER_ULTRA_POINTS],
	g_PlayerInfo[id][PLAYER_MEGA_POINTS], g_PlayerInfo[id][PLAYER_HEALTH], g_PlayerInfo[id][PLAYER_SPEED], g_PlayerInfo[id][PLAYER_GRAVITY],
	g_PlayerInfo[id][PLAYER_MONEY], g_PlayerInfo[id][PLAYER_DAMAGE], g_PlayerInfo[id][PLAYER_LONG_JUMP], g_PlayerInfo[id][PLAYER_JUMPS], g_PlayerInfo[id][PLAYER_INVISIBLE],
	g_PlayerInfo[id][PLAYER_LIGHTING], g_PlayerInfo[id][PLAYER_STRENGHT], g_PlayerInfo[id][PLAYER_RESPAWN], g_PlayerInfo[id][PLAYER_CRITICAL])
	
	nvault_set(g_nVaultFile, szKey, szFormat)
	
}

public loadData(id)
{
	if((!g_nVaultFile_SaveBots && is_user_bot(id)) || g_nVaultFile_Mode == 0)
		return;
		
	new szFormat[128]

	new szKey[33];

	if(g_nVaultFile_Mode == 1) 
		formatex(szKey, charsmax(szKey), g_PlayerInfo[id][PLAYER_NICK]);
	else if(g_nVaultFile_Mode == 2) 
		get_user_ip(id, szKey, charsmax(szKey), 1);
	else if(g_nVaultFile_Mode == 3) 
		get_user_authid(id, szKey, charsmax(szKey));
	
	if(nvault_get(g_nVaultFile, szKey, szFormat, charsmax(szFormat))) {
		if(!is_user_bot(id) || (g_nVaultFile_SaveBots && is_user_bot(id)))
			nvault_touch(g_nVaultFile, szKey)
		
		new lvl[8], exp[12], coins[7], points[6], upoints[6], mpoints[6], health[6], speed[6], gravity[6], money[6],
		damage[6], ljump[6], jumps[6], invis[6], lighting[6], strenght[6], respawn[6], critical[6]

                trim(szFormat)
		parse(szFormat, lvl, 7, exp, 11, coins, 6, points, 5, upoints, 5, mpoints, 5, health, 5, speed, 5, gravity, 5, money, 5,
		damage, 5, ljump, 5, jumps,5, invis, 5, lighting, 5, strenght, 5, respawn, 5, critical, 5)
		
		g_PlayerInfo[id][PLAYER_LEVEL] = str_to_num(lvl)
		g_PlayerInfo[id][PLAYER_EXP] = str_to_num(exp)
		g_PlayerInfo[id][PLAYER_COINS] = str_to_num(coins)
		
		g_PlayerInfo[id][PLAYER_POINTS] = str_to_num(points)
		g_PlayerInfo[id][PLAYER_ULTRA_POINTS] = str_to_num(upoints)
		g_PlayerInfo[id][PLAYER_MEGA_POINTS] = str_to_num(mpoints)
		
		g_PlayerInfo[id][PLAYER_HEALTH] = str_to_num(health)
		g_PlayerInfo[id][PLAYER_SPEED] = str_to_num(speed)
		g_PlayerInfo[id][PLAYER_GRAVITY] = str_to_num(gravity)
		g_PlayerInfo[id][PLAYER_MONEY] = str_to_num(money)
		
		g_PlayerInfo[id][PLAYER_DAMAGE] = str_to_num(damage)
		g_PlayerInfo[id][PLAYER_LONG_JUMP] = str_to_num(ljump)
		g_PlayerInfo[id][PLAYER_JUMPS] = str_to_num(jumps)
		g_PlayerInfo[id][PLAYER_INVISIBLE] = str_to_num(invis)
		
		g_PlayerInfo[id][PLAYER_LIGHTING] = str_to_num(lighting)
		g_PlayerInfo[id][PLAYER_STRENGHT] = str_to_num(strenght)
		g_PlayerInfo[id][PLAYER_RESPAWN] = str_to_num(respawn)
		g_PlayerInfo[id][PLAYER_CRITICAL] = str_to_num(critical)
	}
}

public LoadConfig() {
	
	/* Sprawdzanie czy plik konfiguracyjny istnieje */
	/* Checking that configuration file is exists */
	
	if(file_exists(gszCvarFile))
		server_cmd("exec %s", gszCvarFile)
	else
		log_to_file(gszLogFile, "%s %L", gszPrefix, LANG_SERVER, "LOAD_CFG_ERROR_1");
	
	LoadDefaultConfig();
	
	new iOption = 90
	
	if(file_exists(gszConfigFile)) {
		/* 
		Wczytwyanie konfiguracji z pliku gszConfigFile
		Jesli wystapily jakies bledy, zostana wczytanie domyslne wartosci 
		
		Loading configuration from file gszConfigFile
		If there were some errors, will loads default values
		*/
		
		new szText[64], iLen
		new szData[4][33];
		
		new iValue;
		new Float:fValue;
		
		for(new i = 0 ; read_file(gszConfigFile, i, szText, 63, iLen); i ++) {	
			iValue = 0;
			fValue = 0.0;
			
			/* Usuniecie spacji na poczatku i na koncu wiersza */
			/* Deletes spaces from begin and end of string */
			
			trim(szText)
			
			/* Sprawdzenie, czy wiersz to komentarz */
			/* Checking that line is commentary */
			
			if(szText[0] == ';' || (szText[0] == '/' && szText[1] == '/') || szText[0] == '/')
				continue;
			
			if(!strlen(szText))
				continue;
			
			parse(szText, szData[0], 32, szData[1], 32, szData[2], 32)
			
			if(!strlen(szData[2])) {
				log_to_file(gszLogFile, "%s %L", gszPrefix, LANG_SERVER, "LOAD_CFG_ERROR_3", szData[0], i);
				continue;
			}

			iOption --;
			
			/*  =======================================
			szData[0] - komenda [command]
			szData[1] - ' = ' 
			szData[2] - wartosc [int / float / char] [values]
			=======================================  */
			
			iValue = str_to_num(szData[2]);
			fValue = str_to_float(szData[2]);
			
			if(equali(szData[2], "ON"))
				iValue = 1;
			else if(equali(szData[2], "OFF"))
				iValue = 0;
			
			/* Ustawianie wartosci z pliku*/
			/* Setting values from file */
			/* Exp */

                        if(equali(szData[0], "ADMIN_MENU_FLAG")) {
                                remove_quotes(szData[2])
                                trim(szData[2])
                                g_AdminMenuFlag = szData[2][0]
                        }
                        else if(equali(szData[0], "SHOP")) 
                        	g_ShopStatus = iValue;
			else if(equali(szData[0], "NVAULT_EXPIRE_DAYS")) 
			        g_nVaultFile_ExpireDays = iValue
			else if(equali(szData[0], "NVAULT_MIN_LEVEL_TO_SAVE")) 
			        g_nVaultFile_MinLevelSave = iValue
			else if(equali(szData[0], "NVAULT_SAVE_DATA_MODE")) 
			        g_nVaultFile_Mode = iValue;
			else if(equali(szData[0], "NVAULT_SAVE_BOTS")) 
			        g_nVaultFile_SaveBots = iValue;
			else if(equali(szData[0], "NVAULT_AUTO_SAVE_DELAY"))
			        g_nVaultFile_AutoSave_Delay = fValue
			else if(equali(szData[0], "VIP")) 
			        g_VipStatus = iValue
			else if(equali(szData[0], "MIN_PLAYERS")) 
			       g_MinPlayers = iValue < 0 ? 0 : iValue;
			else if(equali(szData[0], "VIP_FLAG"))  {
			        remove_quotes(szData[2])
			        trim(szData[2])
			        g_VipFlag = szData[2][0]
			}
			else if(equali(szData[0], "VIP_BONUS_HP")) 
			        g_VipBonus[0] = iValue
			else if(equali(szData[0], "VIP_BONUS_SPEED")) 
			        g_VipBonus[1] = iValue
			else if(equali(szData[0], "VIP_EXP_MULTIPLIER")) 
			        g_VipExpMultiplier = fValue
			else if(equali(szData[0], "VIP_BONUS_COIN")) 
                                g_VipBonus[2] = iValue
			else if(equali(szData[0], "FAST_STATS_POINTS")) 
				g_FastStats[0] = bool:iValue 
			else if(equali(szData[0], "FAST_STATS_ULTRA_POINTS")) 
				g_FastStats[1] = bool:iValue 
			else if(equali(szData[0], "FAST_STATS_MEGA_POINTS")) 
				g_FastStats[2] = bool:iValue
			else if(equali(szData[0], "FAST_STATS_VALUE")) {
				new szValue[7][8];
				new szTemp[2][2];
				parse(szText, szTemp[0], 1, szTemp[1], 1, szValue[0], 7,
				szValue[1], 7, szValue[2], 7, szValue[3], 7, szValue[4], 7,
				szValue[5], 7, szValue[6], 7)
				
				g_FastStatsNum = 0
				
				for(new i ; i < 7 ; i ++) {
					if(str_to_num(szValue[i]) > 0) {
						g_FastStatsValue[i] = str_to_num(szValue[i])
						g_FastStatsNum++;
					}
				}
				
				if(g_FastStatsNum == 0) 
					g_FastStatsValue = { 1, 3, 5, 10, 25, 50, 100 } ;
				
			}
			else if(equali(szData[0], "SHOW_HEALTH_COLOR_R")) 
				g_ShowHealthColor[0] = iValue;
			else if(equali(szData[0], "SHOW_HEALTH_COLOR_G")) 
				g_ShowHealthColor[1] = iValue;
			else if(equali(szData[0], "SHOW_HEALTH_COLOR_B")) 
				g_ShowHealthColor[2] = iValue;
			else if(equali(szData[0], "SHOW_HEALTH_POSITION_X")) 
				g_ShowHealthPosition[0] = fValue
			else if(equali(szData[0], "SHOW_HEALTH_POSITION_Y")) 
				g_ShowHealthPosition[1] = fValue;
			else if(equali(szData[0], "PLAYER_HUD_REFRESH_TIME")) 
				g_RefreshHudTime = fValue
			else if(equali(szData[0], "RESET")) 
				g_Reset = bool:iValue
			else if(equali(szData[0], "RESET_POINTS")) 
				g_ResetPoints[0] = iValue
			else if(equali(szData[0], "RESET_POINTS_PRICE")) 
				g_ResetPoints[1] = iValue
			else if(equali(szData[0], "RESET_ULTRA_POINTS")) 
				g_ResetUltraPoints[0] = iValue
			else if(equali(szData[0], "RESET_ULTRA_POINTS_PRICE")) 
				g_ResetUltraPoints[1] = iValue
			else if(equali(szData[0], "RESET_MEGA_POINTS")) 
				g_ResetMegaPoints[0] = iValue
			else if(equali(szData[0], "RESET_MEGA_POINTS_PRICE")) 
				g_ResetMegaPoints[1] = iValue
			else if(equali(szData[0], "TABLE_EXP")) 
				gTableExp = bool:iValue
			else if(equali(szData[0], "MULTIPLIER_POWER")) 
				gTableMultiplier_Power = iValue;
			else if(equali(szData[0], "MULTIPLIER_1")) 
				gTableMultiplier_1 = fValue;
			else if(equali(szData[0], "MULTIPLIER_2")) 
				gTableMultiplier_2 = fValue;
			else if(equali(szData[0], "MULTIPLIER_MAX_LEVEL")) 
				gTableMultiplier_MaxLevel = iValue;
			else if(equali(szData[0], "FIRST_LEVEL_EXP")) 
				gTableMultiplier_FirstLevelExp = iValue;
			/* Punkty [POINTS]*/
			else if(equali(szData[0], "POINTS")) 
				g_PointsInfo[POINTS] = bool:iValue
			else if(equali(szData[0], "POINTS_MULTIPLIER")) 
				g_PointsInfo[POINTS_MULTIPLIER] = iValue
			else if(equali(szData[0], "POINTS_LEVEL_RATIO")) 
				g_PointsInfo[POINTS_LEVEL_RATIO] = iValue;
			//
			else if(equali(szData[0], "POINTS_HEALTH")) 
				g_PointsInfo[POINTS_HEALTH] = bool:iValue
			else if(equali(szData[0], "POINTS_HEALTH_MULTIPLIER")) 
				g_PointsInfo[POINTS_HEALTH_MULTIPLIER] = iValue;
			else if(equali(szData[0], "POINTS_HEALTH_MAX_POINTS")) 
				g_PointsInfo[POINTS_HEALTH_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "POINTS_SPEED")) 
				g_PointsInfo[POINTS_SPEED] = bool:iValue
			else if(equali(szData[0], "POINTS_SPEED_MULTIPLIER")) 
				g_PointsInfo[POINTS_SPEED_MULTIPLIER] = fValue;
			else if(equali(szData[0], "POINTS_SPEED_MAX_POINTS")) 
				g_PointsInfo[POINTS_SPEED_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "POINTS_GRAVITY"))
				g_PointsInfo[POINTS_GRAVITY] = bool:iValue
			else if(equali(szData[0], "POINTS_GRAVITY_MULTIPLIER")) 
				g_PointsInfo[POINTS_GRAVITY_MULTIPLIER] = fValue;
			else if(equali(szData[0], "POINTS_GRAVITY_MAX_POINTS")) 
				g_PointsInfo[POINTS_GRAVITY_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "POINTS_MONEY")) 
				g_PointsInfo[POINTS_MONEY] = bool:iValue
			else if(equali(szData[0], "POINTS_MONEY_MULTIPLIER")) 
				g_PointsInfo[POINTS_MONEY_MULTIPLIER] = iValue;
			else if(equali(szData[0], "POINTS_MONEY_MAX_POINTS")) 
				g_PointsInfo[POINTS_MONEY_MAX_POINTS] = iValue;
			/* Ultra punkty [Ultra points]*/
			else if(equali(szData[0], "ULTRA_POINTS")) 
				g_UltraPointsInfo[ULTRA_POINTS] = bool:iValue
			else if(equali(szData[0], "ULTRA_POINTS_MULTIPLIER")) 
				g_UltraPointsInfo[ULTRA_POINTS_MULTIPLIER] = iValue;
			else if(equali(szData[0], "ULTRA_POINTS_LEVEL_RATIO")) 
				g_UltraPointsInfo[ULTRA_POINTS_LEVEL_RATIO] = iValue;
			//
			else if(equali(szData[0], "ULTRA_POINTS_DAMAGE")) 
				g_UltraPointsInfo[ULTRA_POINTS_DAMAGE] = bool:iValue
			else if(equali(szData[0], "ULTRA_POINTS_DAMAGE_MULTIPLIER")) 
				g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MULTIPLIER] = fValue;
			else if(equali(szData[0], "ULTRA_POINTS_DAMAGE_MAX_POINTS")) 
				g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "ULTRA_POINTS_LONG_JUMP")) 
				g_UltraPointsInfo[ULTRA_POINTS_LONG_JUMP] = bool:iValue
			else if(equali(szData[0], "ULTRA_POINTS_LONG_J_MULTIPLIER")) 
				g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MULTIPLIER] = fValue;
			else if(equali(szData[0], "ULTRA_POINTS_LONG_J_DELAY_MIN")) 
				g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MIN] = fValue;
			else if(equali(szData[0], "ULTRA_POINTS_LONG_J_DELAY_MAX")) 
				g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MAX] = fValue;
			else if(equali(szData[0], "ULTRA_POINTS_LONG_J_MAX_POINTS")) 
				g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "ULTRA_POINTS_JUMPS")) 
				g_UltraPointsInfo[ULTRA_POINTS_JUMPS] = bool:iValue
			else if(equali(szData[0], "ULTRA_POINTS_JUMPS_MULTIPLIER")) 
				g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MULTIPLIER] = iValue;
			else if(equali(szData[0], "ULTRA_POINTS_JUMPS_MAX_POINTS")) 
				g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "ULTRA_POINTS_INVIS")) 
				g_UltraPointsInfo[ULTRA_POINTS_INVIS] = bool:iValue
			else if(equali(szData[0], "ULTRA_POINTS_INVIS_ONLY_KNIFE")) 
				g_UltraPointsInfo[ULTRA_POINTS_INVIS_ONLY_KNIFE] = bool:iValue
			else if(equali(szData[0], "ULTRA_POINTS_INVIS_MIN_LEVEL")) 
				g_UltraPointsInfo[ULTRA_POINTS_INVIS_MIN_LEVEL] = iValue;
			else if(equali(szData[0], "ULTRA_POINTS_INVIS_MAX_POINTS")) 
				g_UltraPointsInfo[ULTRA_POINTS_INVIS_MAX_POINTS] = iValue;
			/* Mega punkty [Mega points]*/
			else if(equali(szData[0], "MEGA_POINTS")) 
				g_MegaPointsInfo[MEGA_POINTS] = bool:iValue
			else if(equali(szData[0], "MEGA_POINTS_MULTIPLIER")) 
				g_MegaPointsInfo[MEGA_POINTS_MULTIPLIER] = iValue;
			else if(equali(szData[0], "MEGA_POINTS_LEVEL_RATIO")) 
				g_MegaPointsInfo[MEGA_POINTS_LEVEL_RATIO] = iValue;
			//
			else if(equali(szData[0], "MEGA_POINTS_LIGHTING")) 
				g_MegaPointsInfo[MEGA_POINTS_LIGHTING] = bool:iValue
			else if(equali(szData[0], "MEGA_POINTS_LIGHTING_MULTIPLIER")) 
				g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MULTIPLIER] = iValue;
			else if(equali(szData[0], "MEGA_POINTS_LIGHTING_DAMAGE")) 
				g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DAMAGE] = fValue;
			else if(equali(szData[0], "MEGA_POINTS_LIGHTING_DELAY_MIN")) 
				g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MIN] = fValue;
			else if(equali(szData[0], "MEGA_POINTS_LIGHTING_DELAY_MIN")) 
				g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX] = fValue;
			else if(equali(szData[0], "MEGA_POINTS_LIGHTING_MAX_POINTS")) 
				g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "MEGA_POINTS_STRENGHT")) 
				g_MegaPointsInfo[MEGA_POINTS_STRENGHT] = bool:iValue
			else if(equali(szData[0], "MEGA_POINTS_STRENGHT_MULTIPLIER")) 
				g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MULTIPLIER] = fValue;
			else if(equali(szData[0], "MEGA_POINTS_STRENGHT_MAX_POINTS")) 
				g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "MEGA_POINTS_RESPAWN")) 
				g_MegaPointsInfo[MEGA_POINTS_RESPAWN] = bool:iValue
			else if(equali(szData[0], "MEGA_POINTS_RESPAWN_MULTI_MAX")) 
				g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MAX] = iValue;
			else if(equali(szData[0], "MEGA_POINTS_RESPAWN_MULTI_MIN")) 
				g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MIN] = iValue;
			else if(equali(szData[0], "MEGA_POINTS_RESPAWN_MAX_POINTS")) 
				g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MAX_POINTS] = iValue;
			//
			else if(equali(szData[0], "MEGA_POINTS_CRITICAL")) 
				g_MegaPointsInfo[MEGA_POINTS_CRITICAL] = bool:iValue
			else if(equali(szData[0], "MEGA_POINTS_CRITICAL_MULTIPLIER")) 
				g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MULTIPLIER] = fValue;
			else if(equali(szData[0], "MEGA_POINTS_CRITICAL_MAX_POINTS")) 
				g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MAX_POINTS] = iValue;
			else if(equali(szData[0], "MEGA_POINTS_CRITICAL_CHANCE_MAX")) 
				g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MAX] = iValue;
			else if(equali(szData[0], "MEGA_POINTS_CRITICAL_CHANCE_MIN")) 
				g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MIN] = iValue;		
		}
		
		
		CheckConfigRight(iOption);
	}
	else
		log_to_file(gszLogFile, "%s %L", gszPrefix, LANG_SERVER, "LOAD_CFG_ERROR_2", gszConfigFile);
}

/* Zapobieganie niepotrzebnym problemom / bugom */
public CheckConfigRight(iOption) {
	if(!g_PointsInfo[POINTS_HEALTH] && !g_PointsInfo[POINTS_SPEED] && g_PointsInfo[POINTS_GRAVITY] && g_PointsInfo[POINTS_MONEY])
		if(g_PointsInfo[POINTS]) 
		        g_PointsInfo[POINTS] = false
	
	if(!g_UltraPointsInfo[ULTRA_POINTS_DAMAGE] && !g_UltraPointsInfo[ULTRA_POINTS_LONG_JUMP] && !g_UltraPointsInfo[ULTRA_POINTS_JUMPS] && !g_UltraPointsInfo[ULTRA_POINTS_INVIS])
		if(g_UltraPointsInfo[ULTRA_POINTS])
		        g_UltraPointsInfo[ULTRA_POINTS] = false
	
	if(!g_MegaPointsInfo[MEGA_POINTS_LIGHTING] && !g_MegaPointsInfo[MEGA_POINTS_STRENGHT] && !g_MegaPointsInfo[MEGA_POINTS_RESPAWN] && !g_MegaPointsInfo[MEGA_POINTS_CRITICAL]) 
		if(g_MegaPointsInfo[MEGA_POINTS])
		        g_MegaPointsInfo[MEGA_POINTS] = false
	
	if(iOption > 0) 
		log_to_file(gszLogFile, "%s %L", gszPrefix, LANG_SERVER, "LOAD_CFG_ERROR_4");
	else if(iOption < 0)
		log_to_file(gszLogFile, "%s %L", gszPrefix, LANG_SERVER, "LOAD_CFG_ERROR_5");
}

public LoadDefaultConfig() {
	/* Domyslna konfiguracja gry */
	
	server_cmd("sv_maxspeed ^"9999.9^"");
	
	g_ShowHealthColor 					= { 127, 255, 255 }
	g_ShowHealthPosition 					= Float:{ 0.05, 0.9 } 
	
	g_ShopStatus						= 1
	
	g_RefreshHudTime					= 1.0
	g_nVaultFile_ExpireDays					= 7
	g_nVaultFile_MinLevelSave				= 1
	g_nVaultFile_Mode					= 1 // 0 - wyl ; 1 - nick ; 2 - ip ; 3 steamid
	g_nVaultFile_SaveBots					= 0;
	g_nVaultFile_AutoSave_Delay                             = 180.0
	
	gTableExp 			                	= true;
	
	gTableMultiplier_Power 		              	   	= 2;
	gTableMultiplier_1 		             	   	= 14.4;
	gTableMultiplier_2 		            	     	= 5.9;
	gTableMultiplier_MaxLevel 	           	     	= 300;
	gTableMultiplier_FirstLevelExp          	 	= 40;
	
	g_FastStatsValue                                 	= { 1, 3, 5, 10, 25, 50, 100 }
	g_FastStatsNum                                   	= 7
	g_FastStats[0]                                      	= true
	g_FastStats[1]                                      	= false
	g_FastStats[2]                                      	= false
	
	g_Reset							= true
	g_ResetPoints[0]					= 1
	g_ResetPoints[1]					= 0
	
	g_ResetUltraPoints[0]					= 1
	g_ResetUltraPoints[1]					= 2000
	
	g_ResetMegaPoints[0]					= 0
	g_ResetMegaPoints[1]					= 0

	g_VipStatus                                             = true
	g_VipFlag                                               = 't'
	g_VipBonus[0]                                           = 40
	g_VipBonus[1]                                           = 25
	g_VipBonus[2]                                           = 1
        g_VipExpMultiplier                                      = 0.3
        
	g_AdminMenuFlag                                         = 'd'
	
	/* Punkty */
	
	g_PointsInfo[POINTS] 		                   	= true
	g_PointsInfo[POINTS_MULTIPLIER]                    	= 4;
	g_PointsInfo[POINTS_LEVEL_RATIO]                 	= 1;
	
	g_PointsInfo[POINTS_HEALTH] 			 	= true
	g_PointsInfo[POINTS_HEALTH_MULTIPLIER]		 	= 1
	g_PointsInfo[POINTS_HEALTH_MAX_POINTS] 		 	= 300
	
	g_PointsInfo[POINTS_SPEED] 			 	= true
	g_PointsInfo[POINTS_SPEED_MULTIPLIER] 		 	= 0.4
	g_PointsInfo[POINTS_SPEED_MAX_POINTS] 		 	= 300
	
	g_PointsInfo[POINTS_GRAVITY] 			 	= true
	g_PointsInfo[POINTS_GRAVITY_MULTIPLIER] 	 	= 1.666
	g_PointsInfo[POINTS_GRAVITY_MAX_POINTS] 	 	= 300	
	
	g_PointsInfo[POINTS_MONEY] 			 	= true
	g_PointsInfo[POINTS_MONEY_MULTIPLIER] 		 	= 13
	g_PointsInfo[POINTS_MONEY_MAX_POINTS] 		 	= 300
	
	/* Ultra Punkty */
	
	g_UltraPointsInfo[ULTRA_POINTS]       		 	= true
	g_UltraPointsInfo[ULTRA_POINTS_MULTIPLIER] 	 	= 1;
	g_UltraPointsInfo[ULTRA_POINTS_LEVEL_RATIO]  	 	= 15;
	
	g_UltraPointsInfo[ULTRA_POINTS_DAMAGE] 		 	= true
	g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MULTIPLIER]	= 4.0
	g_UltraPointsInfo[ULTRA_POINTS_DAMAGE_MAX_POINTS]	= 5
	
	g_UltraPointsInfo[ULTRA_POINTS_LONG_JUMP] 	 	= true
	g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MULTIPLIER]	= 1.0
	g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MIN] 	= 5.0
	g_UltraPointsInfo[ULTRA_POINTS_LONG_J_DELAY_MAX] 	= 15.0
	g_UltraPointsInfo[ULTRA_POINTS_LONG_J_MAX_POINTS]	= 5
	
	g_UltraPointsInfo[ULTRA_POINTS_JUMPS] 			= true
	g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MULTIPLIER] 	= 3
	g_UltraPointsInfo[ULTRA_POINTS_JUMPS_MAX_POINTS] 	= 5
	
	g_UltraPointsInfo[ULTRA_POINTS_INVIS] 		 	= true
	g_UltraPointsInfo[ULTRA_POINTS_INVIS_ONLY_KNIFE] 	= false
	g_UltraPointsInfo[ULTRA_POINTS_INVIS_MAX_POINTS] 	= 5
	g_UltraPointsInfo[ULTRA_POINTS_INVIS_MIN_LEVEL]         = 30
	
	/* Mega Punkty */
	
	g_MegaPointsInfo[MEGA_POINTS] 			 	= _:true;
	g_MegaPointsInfo[MEGA_POINTS_MULTIPLIER] 	 	= 1
	g_MegaPointsInfo[MEGA_POINTS_LEVEL_RATIO] 	 	= 75
	
	g_MegaPointsInfo[MEGA_POINTS_LIGHTING] 		 	= _:true
	g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MULTIPLIER]	= 2
	g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DAMAGE]    	= 47.5
	g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MIN] 	= 25.0
	g_MegaPointsInfo[MEGA_POINTS_LIGHTING_DELAY_MAX] 	= 25.0
	g_MegaPointsInfo[MEGA_POINTS_LIGHTING_MAX_POINTS]	= 1
	
	g_MegaPointsInfo[MEGA_POINTS_STRENGHT]          	  = _:true
	g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MULTIPLIER] 	= 20.0
	g_MegaPointsInfo[MEGA_POINTS_STRENGHT_MAX_POINTS] 	= 1
	
	g_MegaPointsInfo[MEGA_POINTS_RESPAWN]            	= _:true
	g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MAX]  	= 3
	g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MULTI_MIN]  	= 3
	g_MegaPointsInfo[MEGA_POINTS_RESPAWN_MAX_POINTS] 	= 1
	
	g_MegaPointsInfo[MEGA_POINTS_CRITICAL] 		 	= _:true
	g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MULTIPLIER]	= 2.0
	g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MAX]	= 8
	g_MegaPointsInfo[MEGA_POINTS_CRITICAL_CHANCE_MIN]	= 8
	g_MegaPointsInfo[MEGA_POINTS_CRITICAL_MAX_POINTS]	= 1
	
}

/* Status VIP w tabeli */
public messageScoreAttrib(iMsgID, iDest, iReceiver)  {   	
	if(g_CvarValue[CVAR_VIP_TABLE_STATUS]) {
		new iPlayer = get_msg_arg_int(1);
	
		if(is_user_connected(iPlayer) && is_user_vip(iPlayer))
		       set_msg_arg_int(2, ARG_BYTE, is_user_alive(iPlayer) ? (1 << 2) : (1 << 0));  
	}
}

/* Prefix przed nickiem */
public handleSayText(msgId, msgDest, msgEnt) {
	if(g_CvarValue[CVAR_CHAT_LEVEL_PREFIX] || g_CvarValue[CVAR_VIP_CHAT_PREFIX]) {
		new id = get_msg_arg_int(1);
		
		if(!is_user_connected(id) || get_user_team(id) == 3 || get_user_team(id) == 0)      
			return PLUGIN_CONTINUE;
		
		new szTmp[256],szTmp2[256];
		get_msg_arg_string(2,szTmp, charsmax( szTmp ) )
		
		
		new szPrefix[33]
		if(!is_user_vip(id) && g_CvarValue[CVAR_CHAT_LEVEL_PREFIX])
			formatex(szPrefix, charsmax(szPrefix), "^x04[^x01%d ^x03lvl^x04]", g_PlayerInfo[id][PLAYER_LEVEL])
		else if(is_user_vip(id)) {
			if(g_CvarValue[CVAR_CHAT_LEVEL_PREFIX]) 
			       	formatex(szPrefix, charsmax(szPrefix), "^x04[^x01%d ^x03lvl^x04]", g_PlayerInfo[id][PLAYER_LEVEL])	
			if(g_CvarValue[CVAR_VIP_CHAT_PREFIX])
				format(szPrefix, charsmax(szPrefix), "%s^x04[^x01VIP^x04]", szPrefix)
		}
		
		if(!equal(szTmp,"#Cstrike_Chat_All")) {
			add(szTmp2,charsmax(szTmp2),szPrefix);
			add(szTmp2,charsmax(szTmp2)," ");
			add(szTmp2,charsmax(szTmp2),szTmp);
		}
		else {
			add(szTmp2,charsmax(szTmp2),szPrefix);
			add(szTmp2,charsmax(szTmp2),"^x03 %s1^x01 :  %s2");
		}
		
		set_msg_arg_string(2,szTmp2);
	}
	return PLUGIN_CONTINUE;
}

stock get_loguser_index()  {
	new loguser[80], name[32]
	read_logargv(0, loguser, 79)
	parse_loguser(loguser, name, 31)
	
	return get_user_index(name)
}


/* Tworzy efekt pioruna */
stock Create_Lighting(startEntity, endEntity, startFrame, frameRate, life, width, noise, red, green, blue, alpha, speed) {
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
	write_byte( TE_BEAMENTS )
	write_short( startEntity )              // start entity
	write_short( endEntity )                // end entity
	write_short( g_SpriteLighting )                  // model
	write_byte( startFrame )                // starting frame
	write_byte( frameRate )                 // frame rate
	write_byte( life )                              // life
	write_byte( width )                             // line width
	write_byte( noise )                             // noise amplitude
	write_byte( red )                               // red
	write_byte( green )                             // green
	write_byte( blue )                              // blue
	write_byte( alpha )                             // brightness
	write_byte( speed )                             // scroll speed
	message_end()
}
get_able_points(iPlayer = 0, szPointsReturn[3]) {
	if(iPlayer && !is_user_connected(iPlayer))
		return
	new iLevel = iPlayer?g_PlayerInfo[iPlayer][PLAYER_LEVEL]:get_max_level()
	for(new i; i <= iLevel; i++) {
		if(i != 0) {
		        if(((i % g_PointsInfo[POINTS_LEVEL_RATIO]) == 0) && g_PointsInfo[POINTS])
			        szPointsReturn[0] += g_PointsInfo[POINTS_MULTIPLIER]
			if(((i % g_UltraPointsInfo[ULTRA_POINTS_LEVEL_RATIO]) == 0) && g_UltraPointsInfo[ULTRA_POINTS])
				szPointsReturn[1] += g_UltraPointsInfo[ULTRA_POINTS_MULTIPLIER]		
			if(((i % (g_MegaPointsInfo[MEGA_POINTS_LEVEL_RATIO])) == 0) && g_MegaPointsInfo[MEGA_POINTS])
				szPointsReturn[2] += g_MegaPointsInfo[MEGA_POINTS_MULTIPLIER]
		}
	}
}

/* Natyw, dzieki ktoremu mozemy tworzyc wlasny przedmiot w sklepie jako osobny plugin */
public shop_register_item(const szName[], const szDescription[], iPrice, iOnePerRound, iOnlyAlive, iPluginid) {
	
	if(g_ShopItemsNum+1 > SHOP_MAX_ITEMS)
		return PLUGIN_CONTINUE
	
	g_ShopItemsNum++
	
	param_convert(1)
	param_convert(2)
	
	formatex(g_ShopItemsName[g_ShopItemsNum], 63, szName)
	formatex(g_ShopItemsDesc[g_ShopItemsNum], 127, szDescription)

	g_ShopItemsPrice[g_ShopItemsNum] = iPrice
	g_ShopOnePerRound[g_ShopItemsNum] = iOnePerRound
	g_ShopOnlyAlive[g_ShopItemsNum] = iOnlyAlive
	g_ShopPluginIndex[g_ShopItemsNum] = iPluginid
	
	return g_ShopItemsNum;
}

public _get_user_info(index, iInfo) {
	return g_PlayerInfo[index][e_PlayerInfo: iInfo]
}

/* Ustawia widzialnosc gracza */
public set_user_invisible(index, value)
	set_user_rendering(index, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, value)

/* Pobieranie expa dla danego poziomu */
public get_level_exp(iLevel) {
	if(iLevel >= get_max_level())
		iLevel = get_max_level()-1
	return gTableExp ? giExpTable[iLevel] : (iLevel == 0 ? gTableMultiplier_FirstLevelExp : floatround((power(iLevel, gTableMultiplier_Power) * gTableMultiplier_1) * gTableMultiplier_2))
}

/* Zwraca maksymalny poziom jaki mozna osiagnac na serwerze */
public get_max_level()
	return gTableExp ? sizeof giExpTable : gTableMultiplier_MaxLevel;

/* Zwraca aktualny poziom gracza */
public get_user_level(index)
	return g_PlayerInfo[index][PLAYER_LEVEL];

/* Zwraca aktualna ilosc doswiadczenia gracza */
public get_user_exp(index)
	return g_PlayerInfo[index][PLAYER_EXP];

/* Zwraca 1, jesli punkty sa wlaczone */
public points_enabled()
	return _:g_PointsInfo[POINTS]

/* Zwraca 1, jesli ultra punkty sa wlaczone */
public ultra_points_enabled()
	return _:g_UltraPointsInfo[ULTRA_POINTS]

/* Zwraca 1, jesli mega punkty sa wlaczone */
public mega_points_enabled()
	return g_MegaPointsInfo[MEGA_POINTS]

/* Zwraca true, jesli gracz jest VIP'em */
public bool:is_user_vip(index)
        return g_PlayerInfo[index][PLAYER_VIP]? true : false

/* Zwraca true, jesli gracz ma dostep do Admin Menu */
public bool:has_acces_to_menu(index) {
        new szString[2]
        setc(szString, 1, g_AdminMenuFlag)
        if(get_user_flags(index) & read_flags(szString)) return true
        else return false
}
/* Zwraca 1, jesli gracz ma punkty */
public has_points(index)
	return g_PlayerInfo[index][PLAYER_POINTS] ? 1 : 0

/* Zwraca 1, jesli gracz ma ultra punkty */
public has_ultra_points(index)
	return g_PlayerInfo[index][PLAYER_ULTRA_POINTS] ? 1 : 0

/* Zwraca 1, jesli gracz ma mega punkty */
public has_mega_points(index)
	return g_PlayerInfo[index][PLAYER_MEGA_POINTS] ? 1 : 0
public plugin_end()
	nvault_close(g_nVaultFile)
